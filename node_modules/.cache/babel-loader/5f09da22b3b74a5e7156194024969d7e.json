{"ast":null,"code":"var _jsxFileName = \"/Users/JeHongHwang/Desktop/leekang/src/components/chats/ChatDashboard.js\";\nimport React, { Component } from 'react';\nimport M from 'materialize-css';\nimport { connect } from 'react-redux';\nimport { firestoreConnect, isLoaded } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport Preloader from '../functionalComponents/Preloader';\nimport ChatViews from './ChatViews';\nimport ChatTextBox from './ChatTextBox';\nimport ChatRoomList from './ChatRoomList';\nimport './chatDashboard.css';\n\nclass ChatDashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedChat: null,\n      selectedType: null,\n      chatId: '',\n      newChatFormVisible: false,\n      email: null\n    };\n\n    this.newChatBtnClicked = () => {\n      this.setState({\n        newChatFormVisible: true,\n        selectChat: null\n      });\n    };\n\n    this.selectChat = (chatIndex, chatType, chatId) => {\n      this.setState({\n        selectedChat: chatIndex,\n        selectedType: chatType,\n        chatId: chatId\n      });\n    };\n\n    this.selectUnreadMessage = () => {\n      this.setState({\n        recevierHasRead: true\n      });\n    };\n  }\n\n  // clickedChatWhereNotSender = (chatIndex) => {\n  // \tthis.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length -1].sender !== this.state.email;\n  // }\n  componentDidMount() {\n    M.AutoInit();\n  }\n\n  render() {\n    // const { nickname } = this.props.match.params;\n    const _this$props = this.props,\n          chats = _this$props.chats,\n          profile = _this$props.profile;\n    const chatId = this.state.chatId;\n    const dealingChat = !isLoaded(chats) ? null : chats.filter(chat => chat.deal === true); // const currentChat = !isLoaded(chats) ? null : chats.filter(chat => chat.users_nickName[1] === nickname);\n\n    return React.createElement(\"div\", {\n      className: \"chatDashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chatsTemplate container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chatMessages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, !isLoaded(chats) ? React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }) : this.state.selectedType === 'dealChats' ? React.createElement(ChatViews, {\n      profile: profile,\n      chat: dealingChat[this.state.selectedChat],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }) : React.createElement(ChatViews, {\n      profile: profile,\n      chat: chats[this.state.selectedChat],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), this.state.selectedChat !== null && !this.state.newChatFormVisible && isLoaded(chatId) ? React.createElement(ChatTextBox, {\n      profile: profile,\n      chatId: this.state.chatId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }) : null, React.createElement(\"ul\", {\n      className: \"tabs row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"tab col s3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#allChat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"\\uC804\\uCCB4\")), React.createElement(\"li\", {\n      className: \"tab col s3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#dealChat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"\\uAC70\\uB798\\uC911\")), React.createElement(\"li\", {\n      className: \"tab col s3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#dealing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"\\uBB38\\uC758\\uC911\")), React.createElement(\"li\", {\n      className: \"tab col s3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"#completed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"\\uAC70\\uB798\\uC644\\uB8CC\"))), React.createElement(ChatRoomList, {\n      profile: profile,\n      chats: chats,\n      chatInDeal: dealingChat,\n      newChatBtnFn: this.newChatBtnClicked,\n      selectChatFn: this.selectChat,\n      selectedChatIndex: this.state.selectedChat,\n      selectUnreadMessage: this.state.selectUnreadMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    chats: state.firestore.ordered.chatAll,\n    profile: state.firebase.profile\n  };\n};\n\nexport default compose(connect(mapStateToProps), firestoreConnect(props => {\n  const _usr = !isLoaded(props.profile.email) ? 'null' : props.profile.email;\n\n  return [{\n    collection: 'chats',\n    where: ['users_email', 'array-contains', _usr],\n    orderBy: ['updatedAt', 'desc'],\n    storeAs: 'chatAll'\n  }];\n}))(ChatDashboard);","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/src/components/chats/ChatDashboard.js"],"names":["React","Component","M","connect","firestoreConnect","isLoaded","compose","Preloader","ChatViews","ChatTextBox","ChatRoomList","ChatDashboard","state","selectedChat","selectedType","chatId","newChatFormVisible","email","newChatBtnClicked","setState","selectChat","chatIndex","chatType","selectUnreadMessage","recevierHasRead","componentDidMount","AutoInit","render","props","chats","profile","dealingChat","filter","chat","deal","mapStateToProps","firestore","ordered","chatAll","firebase","_usr","collection","where","orderBy","storeAs"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport M from 'materialize-css'\nimport { connect } from 'react-redux'\nimport { firestoreConnect, isLoaded } from 'react-redux-firebase'\nimport { compose } from 'redux'\nimport Preloader from '../functionalComponents/Preloader';\nimport ChatViews from './ChatViews'\nimport ChatTextBox from './ChatTextBox'\nimport ChatRoomList from './ChatRoomList'\nimport './chatDashboard.css'\n\n\nclass ChatDashboard extends Component {\n\tstate = {\n\t\tselectedChat: null,\n\t\tselectedType: null,\n\t\tchatId: '',\n\t\tnewChatFormVisible: false,\n\t\temail: null,\n\t}\n\t\n\tnewChatBtnClicked = () => {\n\t\tthis.setState({\n\t\t\tnewChatFormVisible: true,\n\t\t\tselectChat: null,\n\t\t})\n\t}\n\t\n\tselectChat = (chatIndex, chatType, chatId) => {\n\t\tthis.setState({\n\t\t\tselectedChat: chatIndex,\n\t\t\tselectedType: chatType,\n\t\t\tchatId: chatId,\n\t\t})\n\t}\n\n\tselectUnreadMessage = () => {\n\t\tthis.setState({\n\t\t\trecevierHasRead : true\n\t\t})\n\t}\n\n\t// clickedChatWhereNotSender = (chatIndex) => {\n\t// \tthis.state.chats[chatIndex].messages[this.state.chats[chatIndex].messages.length -1].sender !== this.state.email;\n\t// }\n\n\tcomponentDidMount(){\n    M.AutoInit();\n\t}\n\trender(){\n    // const { nickname } = this.props.match.params;\n\t\tconst { chats, profile } = this.props;\n\t\tconst { chatId } = this.state;\n    const dealingChat = !isLoaded(chats) ? null : chats.filter(chat => chat.deal === true);\n    // const currentChat = !isLoaded(chats) ? null : chats.filter(chat => chat.users_nickName[1] === nickname);\n\n\t\treturn(\n\t\t\t<div className=\"chatDashboard\">\n\t\t\t\t<div className=\"chatsTemplate container\">\n          {/* <div className=\"chatMessages\">\n            {\n              (nickname)\n                ? (\n                  !isLoaded(chats)\n                    ? <Preloader />\n                    : <ChatViews profile={profile} chat={currentChat[0]} />\n                )\n                : (                  \n                  !isLoaded(chats)\n                    ? <Preloader /> \n                    :\n                    (this.state.selectedType === 'dealChats') ? \n                      <ChatViews profile = { profile } chat = {dealingChat[this.state.selectedChat]} />\n                      :\n                      <ChatViews profile = { profile } chat = {chats[this.state.selectedChat]} />             \n                )\n            }\n          </div> */}\n\t\t\t\t\t<div className=\"chatMessages\">\n\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t!isLoaded(chats)\n\t\t\t\t\t\t\t\t? <Preloader /> \n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t(this.state.selectedType === 'dealChats') ? \n\t\t\t\t\t\t\t\t\t<ChatViews profile = { profile } chat = {dealingChat[this.state.selectedChat]} />\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t<ChatViews profile = { profile } chat = {chats[this.state.selectedChat]} />\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.selectedChat !== null && !this.state.newChatFormVisible && isLoaded(chatId)\n\t\t\t\t\t\t? <ChatTextBox profile={profile} chatId={this.state.chatId}></ChatTextBox> :\n\t\t\t\t\t\tnull\n\t\t\t\t\t}\n\t\t\t\t\t<ul className=\"tabs row\">\n\t\t\t\t\t\t<li className=\"tab col s3\"><a href=\"#allChat\">전체</a></li>\n\t\t\t\t\t\t<li className=\"tab col s3\"><a href=\"#dealChat\">거래중</a></li>\n\t\t\t\t\t\t<li className=\"tab col s3\"><a href=\"#dealing\">문의중</a></li>\n\t\t\t\t\t\t<li className=\"tab col s3\"><a href=\"#completed\">거래완료</a></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<ChatRoomList profile={profile} chats={chats} chatInDeal = {dealingChat} newChatBtnFn = {this.newChatBtnClicked} selectChatFn = {this.selectChat} selectedChatIndex = {this.state.selectedChat} selectUnreadMessage = {this.state.selectUnreadMessage}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\treturn{\n\t\tchats: state.firestore.ordered.chatAll,\n\t\tprofile: state.firebase.profile,\n\t}\n}\n\nexport default compose(\n\tconnect(mapStateToProps),\n\tfirestoreConnect((props) => {\n    const _usr = !isLoaded(props.profile.email) ? 'null' : props.profile.email;\n\t\treturn [\n\t\t\t\t{ collection: 'chats' , where: ['users_email', 'array-contains', _usr], orderBy: ['updatedAt', 'desc'], storeAs:'chatAll'},\n\t\t]\n\t}),\n)(ChatDashboard);"]},"metadata":{},"sourceType":"module"}