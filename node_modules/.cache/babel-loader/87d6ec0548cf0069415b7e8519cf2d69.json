{"ast":null,"code":"/**\n * Returns an array of all `ContentBlock` instances within two block keys\n *\n * @param  {object} contentState A draft.js `ContentState` instance\n * @param  {string} anchorKey    The block key to start searching from\n * @param  {string} focusKey     The block key until which to search\n *\n * @return {array} An array containing the found content blocks\n */\nexport default (function (contentState, anchorKey, focusKey) {\n  var isSameBlock = anchorKey === focusKey;\n  var startingBlock = contentState.getBlockForKey(anchorKey);\n\n  if (!startingBlock) {\n    return [];\n  }\n\n  var selectedBlocks = [startingBlock];\n\n  if (!isSameBlock) {\n    var blockKey = anchorKey;\n\n    while (blockKey !== focusKey) {\n      var nextBlock = contentState.getBlockAfter(blockKey);\n\n      if (!nextBlock) {\n        selectedBlocks = [];\n        break;\n      }\n\n      selectedBlocks.push(nextBlock);\n      blockKey = nextBlock.getKey();\n    }\n  }\n\n  return selectedBlocks;\n});","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/node_modules/draft-js-utils/esm/getSelectedBlocks.js"],"names":["contentState","anchorKey","focusKey","isSameBlock","startingBlock","getBlockForKey","selectedBlocks","blockKey","nextBlock","getBlockAfter","push","getKey"],"mappings":"AAAA;;;;;;;;;AASA,gBAAgB,UAAUA,YAAV,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6C;AAC3D,MAAIC,WAAW,GAAGF,SAAS,KAAKC,QAAhC;AACA,MAAIE,aAAa,GAAGJ,YAAY,CAACK,cAAb,CAA4BJ,SAA5B,CAApB;;AAEA,MAAI,CAACG,aAAL,EAAoB;AAClB,WAAO,EAAP;AACD;;AAED,MAAIE,cAAc,GAAG,CAACF,aAAD,CAArB;;AAEA,MAAI,CAACD,WAAL,EAAkB;AAChB,QAAII,QAAQ,GAAGN,SAAf;;AAEA,WAAOM,QAAQ,KAAKL,QAApB,EAA8B;AAC5B,UAAIM,SAAS,GAAGR,YAAY,CAACS,aAAb,CAA2BF,QAA3B,CAAhB;;AAEA,UAAI,CAACC,SAAL,EAAgB;AACdF,QAAAA,cAAc,GAAG,EAAjB;AACA;AACD;;AAEDA,MAAAA,cAAc,CAACI,IAAf,CAAoBF,SAApB;AACAD,MAAAA,QAAQ,GAAGC,SAAS,CAACG,MAAV,EAAX;AACD;AACF;;AAED,SAAOL,cAAP;AACD,CA3BD","sourcesContent":["/**\n * Returns an array of all `ContentBlock` instances within two block keys\n *\n * @param  {object} contentState A draft.js `ContentState` instance\n * @param  {string} anchorKey    The block key to start searching from\n * @param  {string} focusKey     The block key until which to search\n *\n * @return {array} An array containing the found content blocks\n */\nexport default (function (contentState, anchorKey, focusKey) {\n  var isSameBlock = anchorKey === focusKey;\n  var startingBlock = contentState.getBlockForKey(anchorKey);\n\n  if (!startingBlock) {\n    return [];\n  }\n\n  var selectedBlocks = [startingBlock];\n\n  if (!isSameBlock) {\n    var blockKey = anchorKey;\n\n    while (blockKey !== focusKey) {\n      var nextBlock = contentState.getBlockAfter(blockKey);\n\n      if (!nextBlock) {\n        selectedBlocks = [];\n        break;\n      }\n\n      selectedBlocks.push(nextBlock);\n      blockKey = nextBlock.getKey();\n    }\n  }\n\n  return selectedBlocks;\n});"]},"metadata":{},"sourceType":"module"}