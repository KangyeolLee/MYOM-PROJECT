{"ast":null,"code":"import getSelectedBlocks from './getSelectedBlocks';\nexport default (function (strategy) {\n  return function (editorState, selection) {\n    var contentState = editorState.getCurrentContent();\n    var currentSelection = selection || editorState.getSelection();\n    var startKey = currentSelection.getStartKey();\n    var endKey = currentSelection.getEndKey();\n    var startOffset = currentSelection.getStartOffset();\n    var endOffset = currentSelection.getEndOffset();\n    var isSameBlock = startKey === endKey;\n    var selectedBlocks = getSelectedBlocks(contentState, startKey, endKey);\n    var entityFound = false; // We have to shift the offset to not get false positives when selecting\n    // a character just before or after an entity\n\n    var finalStartOffset = startOffset + 1;\n    var finalEndOffset = endOffset - 1;\n    selectedBlocks.forEach(function (block) {\n      strategy(block, function (start, end) {\n        if (entityFound) {\n          return;\n        }\n\n        var blockKey = block.getKey();\n\n        if (isSameBlock && (end < finalStartOffset || start > finalEndOffset)) {\n          return;\n        } else if (blockKey === startKey && end < finalStartOffset) {\n          return;\n        } else if (blockKey === endKey && start > finalEndOffset) {\n          return;\n        }\n\n        entityFound = true;\n      }, contentState);\n    });\n    return entityFound;\n  };\n});","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/node_modules/draft-js-utils/esm/selectionContainsEntity.js"],"names":["getSelectedBlocks","strategy","editorState","selection","contentState","getCurrentContent","currentSelection","getSelection","startKey","getStartKey","endKey","getEndKey","startOffset","getStartOffset","endOffset","getEndOffset","isSameBlock","selectedBlocks","entityFound","finalStartOffset","finalEndOffset","forEach","block","start","end","blockKey","getKey"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,gBAAgB,UAAUC,QAAV,EAAoB;AAClC,SAAO,UAAUC,WAAV,EAAuBC,SAAvB,EAAkC;AACvC,QAAIC,YAAY,GAAGF,WAAW,CAACG,iBAAZ,EAAnB;AACA,QAAIC,gBAAgB,GAAGH,SAAS,IAAID,WAAW,CAACK,YAAZ,EAApC;AACA,QAAIC,QAAQ,GAAGF,gBAAgB,CAACG,WAAjB,EAAf;AACA,QAAIC,MAAM,GAAGJ,gBAAgB,CAACK,SAAjB,EAAb;AACA,QAAIC,WAAW,GAAGN,gBAAgB,CAACO,cAAjB,EAAlB;AACA,QAAIC,SAAS,GAAGR,gBAAgB,CAACS,YAAjB,EAAhB;AACA,QAAIC,WAAW,GAAGR,QAAQ,KAAKE,MAA/B;AACA,QAAIO,cAAc,GAAGjB,iBAAiB,CAACI,YAAD,EAAeI,QAAf,EAAyBE,MAAzB,CAAtC;AACA,QAAIQ,WAAW,GAAG,KAAlB,CATuC,CASd;AACzB;;AAEA,QAAIC,gBAAgB,GAAGP,WAAW,GAAG,CAArC;AACA,QAAIQ,cAAc,GAAGN,SAAS,GAAG,CAAjC;AACAG,IAAAA,cAAc,CAACI,OAAf,CAAuB,UAAUC,KAAV,EAAiB;AACtCrB,MAAAA,QAAQ,CAACqB,KAAD,EAAQ,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACpC,YAAIN,WAAJ,EAAiB;AACf;AACD;;AAED,YAAIO,QAAQ,GAAGH,KAAK,CAACI,MAAN,EAAf;;AAEA,YAAIV,WAAW,KAAKQ,GAAG,GAAGL,gBAAN,IAA0BI,KAAK,GAAGH,cAAvC,CAAf,EAAuE;AACrE;AACD,SAFD,MAEO,IAAIK,QAAQ,KAAKjB,QAAb,IAAyBgB,GAAG,GAAGL,gBAAnC,EAAqD;AAC1D;AACD,SAFM,MAEA,IAAIM,QAAQ,KAAKf,MAAb,IAAuBa,KAAK,GAAGH,cAAnC,EAAmD;AACxD;AACD;;AAEDF,QAAAA,WAAW,GAAG,IAAd;AACD,OAhBO,EAgBLd,YAhBK,CAAR;AAiBD,KAlBD;AAmBA,WAAOc,WAAP;AACD,GAlCD;AAmCD,CApCD","sourcesContent":["import getSelectedBlocks from './getSelectedBlocks';\nexport default (function (strategy) {\n  return function (editorState, selection) {\n    var contentState = editorState.getCurrentContent();\n    var currentSelection = selection || editorState.getSelection();\n    var startKey = currentSelection.getStartKey();\n    var endKey = currentSelection.getEndKey();\n    var startOffset = currentSelection.getStartOffset();\n    var endOffset = currentSelection.getEndOffset();\n    var isSameBlock = startKey === endKey;\n    var selectedBlocks = getSelectedBlocks(contentState, startKey, endKey);\n    var entityFound = false; // We have to shift the offset to not get false positives when selecting\n    // a character just before or after an entity\n\n    var finalStartOffset = startOffset + 1;\n    var finalEndOffset = endOffset - 1;\n    selectedBlocks.forEach(function (block) {\n      strategy(block, function (start, end) {\n        if (entityFound) {\n          return;\n        }\n\n        var blockKey = block.getKey();\n\n        if (isSameBlock && (end < finalStartOffset || start > finalEndOffset)) {\n          return;\n        } else if (blockKey === startKey && end < finalStartOffset) {\n          return;\n        } else if (blockKey === endKey && start > finalEndOffset) {\n          return;\n        }\n\n        entityFound = true;\n      }, contentState);\n    });\n    return entityFound;\n  };\n});"]},"metadata":{},"sourceType":"module"}