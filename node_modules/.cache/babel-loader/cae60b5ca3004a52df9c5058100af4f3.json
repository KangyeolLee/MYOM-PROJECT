{"ast":null,"code":"var _jsxFileName = \"/Users/JeHongHwang/Desktop/leekang/src/components/chatting/ChattingBoard.js\";\nimport React, { Component } from 'react';\nimport './chattingBoard.css';\nimport ChattingLists from './ChattingLists';\nimport { connect } from 'react-redux';\nimport { firestoreConnect, isLoaded, isEmpty } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport ChattingViewport from './ChattingViewport';\nimport { readMessage, isCheck_status, initAll_joinedRooms } from '../../store/actions/chatAction';\n\nclass ChattingBoard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chatIndex: ''\n    };\n\n    this._select_Room = e => {\n      this.props.readMessage(e.currentTarget.id);\n      this.setState({\n        chatIndex: e.currentTarget.id\n      });\n    };\n  }\n\n  // setupBeforeUnloadListener = (e) => {\n  //   e.preventDefault();\n  //   this.props.initAll_joinedRooms();\n  //   const confirmMessage = '채팅방을 나가시겠습니까?'\n  //   e.returnValue = confirmMessage;\n  //   return confirmMessage;\n  // }\n  // componentDidMount() {\n  //   window.addEventListener('beforeunload', this.setupBeforeUnloadListener);\n  // }\n  // componentWillUnmount() {\n  //   window.removeEventListener('beforeunload', this.setupBeforeUnloadListener);\n  // }\n  componentDidUpdate(prevProps, prevState) {\n    const chattingRoom = document.querySelector('.chattingViewport');\n    const sendBox = document.getElementById('message-sendbox');\n    const prevChat = prevProps.chats;\n    const curChat = this.props.chats;\n    const chatIndex = this.state.chatIndex;\n    if (chatIndex === '') this.props.initAll_joinedRooms(); // 모든 채팅방 초기화. chattingBoard에 들어올 때마다 실행.\n\n    if (chattingRoom && chattingRoom.id === chatIndex) {\n      // 각각의 채팅방을 독립화. 다른 채팅방에서 일어나는 이벤트들이 현재 채팅방에 영향을 못 주도록 막음.\n      const prevRoom = prevChat.filter(chat => chat.id === chatIndex);\n      const curRoom = curChat.filter(chat => chat.id === chatIndex);\n      if (prevState.chatIndex !== chatIndex) chattingRoom.scrollTop = chattingRoom.scrollHeight;\n      if (prevRoom[0].messages.length !== curRoom[0].messages.length) chattingRoom.scrollTop = chattingRoom.scrollHeight;\n    }\n\n    if (prevState.chatIndex !== chatIndex) {\n      // 메시지 입력박스 초기화. 입력폼은 모든 채팅방이 하나의 형태를 공유하므로 방이 바뀔때마다 초기화.\n      if (prevState.chatIndex) {\n        this.props.isCheck_status(prevState.chatIndex);\n      }\n\n      if (sendBox && sendBox.value) {\n        sendBox.value = '';\n        sendBox.style.height = '45px';\n      }\n    }\n  }\n\n  render() {\n    if (!isLoaded(this.props.chats) || !isLoaded(this.props.profile) || !isLoaded(this.props.profileImgs)) return React.createElement(\"div\", {\n      className: \"container ChattingBoard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"\\uB85C\\uB529\\uC911...\");\n    return React.createElement(\"div\", {\n      className: \"container ChattingBoard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row chattingBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col s4 chattingLists\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(ChattingLists, {\n      chats: this.props.chats,\n      profileImgs: this.props.profileImgs,\n      profile: this.props.profile,\n      _select_Room: this._select_Room,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col s8 chattingScreen\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.state.chatIndex ? React.createElement(ChattingViewport, {\n      roomId: this.state.chatIndex,\n      profileImgs: this.props.profileImgs,\n      profile: this.props.profile,\n      selected: this.props.chats.filter(chat => chat.id === this.state.chatIndex),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }) : React.createElement(\"ul\", {\n      className: \"collection waitingRoom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"guide-mention-wrapper center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"guide-mention monsori\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694\"), React.createElement(\"p\", {\n      className: \"guide-mention monsori\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"--\\uB2F5\\uC774 \\uC5C6\\uB2E4. \\uAC08\\uC544\\uC5CE\\uC5B4\\uC57C \\uD568--\"), React.createElement(\"p\", {\n      className: \"guide-mention monsori\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"realtime DB \\uC640 firestore \\uC5F0\\uB3D9\"))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    chats: state.firestore.ordered.chats,\n    profileImgs: state.firestore.data.profileImgs,\n    profile: state.firebase.profile\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    readMessage: chatId => dispatch(readMessage(chatId)),\n    isCheck_status: chatId => dispatch(isCheck_status(chatId)),\n    initAll_joinedRooms: () => dispatch(initAll_joinedRooms())\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), firestoreConnect(props => {\n  if (!isLoaded(props.profile.email)) return [];else return [{\n    collection: 'chats',\n    where: ['users_email', 'array-contains', props.profile.email],\n    orderBy: ['updatedAt', 'desc'],\n    storeAs: 'chats'\n  }, {\n    collection: 'chats',\n    doc: 'realtimeImg',\n    storeAs: 'profileImgs'\n  }];\n}))(ChattingBoard);","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/src/components/chatting/ChattingBoard.js"],"names":["React","Component","ChattingLists","connect","firestoreConnect","isLoaded","isEmpty","compose","ChattingViewport","readMessage","isCheck_status","initAll_joinedRooms","ChattingBoard","state","chatIndex","_select_Room","e","props","currentTarget","id","setState","componentDidUpdate","prevProps","prevState","chattingRoom","document","querySelector","sendBox","getElementById","prevChat","chats","curChat","prevRoom","filter","chat","curRoom","scrollTop","scrollHeight","messages","length","value","style","height","render","profile","profileImgs","mapStateToProps","firestore","ordered","data","firebase","mapDispatchToProps","dispatch","chatId","email","collection","where","orderBy","storeAs","doc"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './chattingBoard.css';\nimport ChattingLists from './ChattingLists';\nimport { connect } from 'react-redux';\nimport { firestoreConnect, isLoaded, isEmpty } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport ChattingViewport from './ChattingViewport';\nimport { readMessage, isCheck_status, initAll_joinedRooms } from '../../store/actions/chatAction'\n\nclass ChattingBoard extends Component {\n  state = {\n    chatIndex: '',\n  }\n  // setupBeforeUnloadListener = (e) => {\n  //   e.preventDefault();\n  //   this.props.initAll_joinedRooms();\n  //   const confirmMessage = '채팅방을 나가시겠습니까?'\n  //   e.returnValue = confirmMessage;\n  //   return confirmMessage;\n  // }\n  // componentDidMount() {\n  //   window.addEventListener('beforeunload', this.setupBeforeUnloadListener);\n  // }\n  // componentWillUnmount() {\n  //   window.removeEventListener('beforeunload', this.setupBeforeUnloadListener);\n  // }\n  componentDidUpdate(prevProps, prevState) {\n    const chattingRoom = document.querySelector('.chattingViewport');\n    const sendBox = document.getElementById('message-sendbox');\n    const prevChat = prevProps.chats;\n    const curChat = this.props.chats;\n    const chatIndex = this.state.chatIndex;\n\n    if (chatIndex === '') this.props.initAll_joinedRooms();   // 모든 채팅방 초기화. chattingBoard에 들어올 때마다 실행.\n\n    if (chattingRoom && chattingRoom.id === chatIndex) {      // 각각의 채팅방을 독립화. 다른 채팅방에서 일어나는 이벤트들이 현재 채팅방에 영향을 못 주도록 막음.\n      const prevRoom = prevChat.filter(chat => chat.id === chatIndex);\n      const curRoom = curChat.filter(chat => chat.id === chatIndex);\n      if(prevState.chatIndex !== chatIndex) chattingRoom.scrollTop = chattingRoom.scrollHeight;\n      if(prevRoom[0].messages.length !== curRoom[0].messages.length) chattingRoom.scrollTop = chattingRoom.scrollHeight;\n    }\n\n    if (prevState.chatIndex !== chatIndex) {                  // 메시지 입력박스 초기화. 입력폼은 모든 채팅방이 하나의 형태를 공유하므로 방이 바뀔때마다 초기화.\n      if (prevState.chatIndex) {\n        this.props.isCheck_status(prevState.chatIndex);\n      }\n      if (sendBox && sendBox.value) {\n        sendBox.value = '';\n        sendBox.style.height = '45px';\n      }\n    }\n  }\n  _select_Room = (e) => {\n    this.props.readMessage(e.currentTarget.id);\n    this.setState({\n      chatIndex: e.currentTarget.id,\n    });\n  }\n  render() {\n    if (!isLoaded(this.props.chats) || !isLoaded(this.props.profile) || !isLoaded(this.props.profileImgs)) return <div className='container ChattingBoard'>로딩중...</div>\n\n    return (\n      <div className=\"container ChattingBoard\">\n        <div className=\"row chattingBox\">\n          <div className=\"col s4 chattingLists\">\n            <ChattingLists chats={this.props.chats} profileImgs={this.props.profileImgs} profile={this.props.profile} _select_Room={this._select_Room} />\n          </div>\n\n          <div className=\"col s8 chattingScreen\">\n            {\n              (this.state.chatIndex)\n                ? (\n                  <ChattingViewport roomId={this.state.chatIndex} profileImgs={this.props.profileImgs} profile={this.props.profile} selected={this.props.chats.filter(chat => chat.id === this.state.chatIndex)} />\n                )\n                : (\n                  <ul className=\"collection waitingRoom\">\n                    <div className=\"guide-mention-wrapper center\">\n                      <i className=\"fas fa-comments\"></i>\n                      <p className='guide-mention monsori'>메시지를 선택해주세요</p>\n                      <p className='guide-mention monsori'>--답이 없다. 갈아엎어야 함--</p>\n                      <p className='guide-mention monsori'>realtime DB 와 firestore 연동</p>\n                    </div>\n                  </ul>\n                )\n            }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    chats: state.firestore.ordered.chats,\n    profileImgs: state.firestore.data.profileImgs,\n    profile: state.firebase.profile,\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    readMessage: (chatId) => dispatch(readMessage(chatId)),\n    isCheck_status: (chatId) => dispatch(isCheck_status(chatId)),\n    initAll_joinedRooms: () => dispatch(initAll_joinedRooms()),\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  firestoreConnect(props => {\n    if (!isLoaded(props.profile.email)) return [];\n    else return [\n      { collection: 'chats', where: ['users_email', 'array-contains', props.profile.email], orderBy: ['updatedAt', 'desc'], storeAs: 'chats' },\n      { collection: 'chats', doc: 'realtimeImg', storeAs: 'profileImgs' }\n    ];\n  }),\n)(ChattingBoard);"]},"metadata":{},"sourceType":"module"}