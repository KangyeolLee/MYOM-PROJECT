{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {}\n};\nvar InputAdornment = React.forwardRef(function InputAdornment(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disablePointer = props.disablePointerEvents,\n      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"]);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return React.createElement(FormControlContext.Provider, {\n    value: null\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, {\n      filled: classes.filled\n    }[variant], {\n      start: classes.positionStart,\n      end: classes.positionEnd\n    }[position], {\n      dense: classes.marginDense\n    }[muiFormControl.margin]),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']),\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(InputAdornment);","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","Typography","withStyles","FormControlContext","useFormControl","styles","root","display","height","maxHeight","alignItems","filled","marginTop","positionStart","marginRight","positionEnd","marginLeft","disablePointerEvents","pointerEvents","hiddenLabel","marginDense","InputAdornment","forwardRef","props","ref","children","classes","className","_props$component","component","Component","_props$disablePointer","_props$disableTypogra","disableTypography","position","variantProp","variant","other","muiFormControl","process","env","NODE_ENV","console","error","createElement","Provider","value","start","end","dense","margin","color","propTypes","node","isRequired","object","string","elementType","bool","oneOf","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {}\n};\nvar InputAdornment = React.forwardRef(function InputAdornment(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disablePointer = props.disablePointerEvents,\n      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"]);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return React.createElement(FormControlContext.Provider, {\n    value: null\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, {\n      filled: classes.filled\n    }[variant], {\n      start: classes.positionStart,\n      end: classes.positionEnd\n    }[position], {\n      dense: classes.marginDense\n    }[muiFormControl.margin]),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']),\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(InputAdornment);"]},"metadata":{},"sourceType":"module"}