{"ast":null,"code":"import firebase from 'firebase/app'; // import 'firebase/firestore';\n// import 'firebase/auth';\n\nexport const signIn = cred => {\n  return dispatch => {\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION).then(() => firebase.auth().signInWithEmailAndPassword(cred.email, cred.password)).then(() => dispatch({\n      type: 'LOGIN_SUCCESS'\n    })).catch(err => {\n      switch (err.code) {\n        case 'auth/user-not-found':\n          dispatch({\n            type: 'NO_REGISTER_EMAIL_ERROR'\n          });\n          break;\n\n        case 'auth/wrong-password':\n          dispatch({\n            type: 'WRONG_PASSWORD_ERROR'\n          });\n          break;\n\n        default:\n          dispatch({\n            type: 'LOGIN_ERROR',\n            err\n          });\n      }\n    });\n  };\n};\nexport const signOut = () => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    // const firestore = getFirestore();\n    // const userProfile = getState().firebase.profile;\n    // const userChats = firestore.collection('chats').where('users_email', 'array-contains', userProfile.email);\n    // const userChats = firestore.collection('chats').doc('1234@naver.com:acrkdduf@naver.com');\n    // userChats.update({\n    //   Logout: true,\n    // })\n    // userChats.get()\n    // .then(snapshot => Promise.all())\n    // .then(snapshot => {\n    //   snapshot.forEach(doc => {\n    //     const chatRef = firestore.collection('chats').doc(doc.id);\n    //     return chatRef.update({\n    //       ['isJoined_' + userProfile.initials]: false,\n    //     });\n    //   })\n    // })\n    firebase.auth().signOut().then(() => window.location.href = '/').then(() => dispatch({\n      type: 'SIGNOUT_SUCCESS'\n    }));\n  };\n};\nexport const signUp = newUser => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    //const firebase = getFirebase();\n    const firestore = getFirestore();\n    const batch = firestore.batch();\n    const userNicknames = firestore.collection('users').doc('userNicknames');\n    userNicknames.get().then(doc => {\n      const userNicknamesList = doc.data();\n      if (userNicknamesList[newUser.nickname]) throw {\n        code: 'auth/duplicate-nickname'\n      };\n    }).then(() => {\n      firebase.auth().createUserWithEmailAndPassword(newUser.email, newUser.password).then(res => {\n        const usersRef = firestore.collection('users').doc(res.user.uid);\n        batch.set(usersRef, {\n          firstName: newUser.firstName,\n          initials: newUser.nickname,\n          email: newUser.email,\n          authority: 'user',\n          profileImgURL: '/img/defaults/userProfile.jpeg',\n          condition_checked: newUser.condition_checked,\n          privacy_checked: newUser.privacy_checked,\n          emailRecieve_checked: newUser.emailRecieve_checked,\n          timeStamp: new Date(),\n          birth: newUser.birth,\n          phoneNumber: newUser.phoneNumber\n        });\n        batch.set(userNicknames, {\n          [newUser.nickname]: true\n        }, {\n          merge: true\n        });\n      }).then(() => {\n        batch.commit();\n        dispatch({\n          type: 'SIGNUP_SUCCESS'\n        });\n      });\n    }).catch(err => {\n      switch (err.code) {\n        case 'auth/email-already-in-use':\n          dispatch({\n            type: 'EMAILUSED_ERROR'\n          });\n          break;\n\n        case 'auth/invalid-email':\n          dispatch({\n            type: 'EMAILINVALID_ERROR'\n          });\n          break;\n\n        case 'auth/operation-not-allowed':\n          dispatch({\n            type: 'OPERATION_ERROR'\n          });\n          break;\n\n        case 'auth/weak-password':\n          dispatch({\n            type: 'WEAKPWD_ERROR'\n          });\n          break;\n\n        case 'auth/duplicate-nickname':\n          dispatch({\n            type: 'SIGNUP_NICKNAME_ERROR'\n          });\n          break;\n\n        default:\n          dispatch({\n            type: 'SIGNUP_ERROR',\n            err\n          });\n      }\n    });\n  };\n};\nexport const withdrawal = user => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    //const firebase = getFirebase();\n    const userInfo = firebase.auth().currentUser;\n    const userProfile = getState().firebase.profile;\n    const firestore = getFirestore();\n    const userNicknames = firestore.collection('users').doc('userNicknames');\n\n    if (user.email !== userInfo.email) {\n      alert('아이디가 일치하지 않습니다');\n      return;\n    } else {\n      userInfo.delete().then(() => {\n        firestore.collection('users').doc(userInfo.uid).delete();\n      }).then(() => {\n        userNicknames.update({\n          [userProfile.initials]: firebase.firestore.FieldValue.delete()\n        });\n      }).then(() => {\n        window.location.href = '/';\n        dispatch({\n          type: 'DELETE_SUCCESS'\n        });\n      }).catch(err => {\n        switch (err.code) {\n          case 'auth/requires-recent-login':\n            dispatch({\n              type: 'DELETE_RECENT_LOGIN_ERROR'\n            });\n            break;\n\n          default:\n            dispatch({\n              type: 'DELETE_ERROR',\n              err\n            });\n        }\n      });\n    }\n  };\n}; // export const changePwd = (email, oldpwd, newpwd, chknewpwd) => {\n//   return(dispatch) => {\n//     let user = firebase.auth().currentUser;\n//     let cred = firebase.auth.EmailAuthProvider.credential(email, oldpwd)\n//     user.reauthenticateWithCredential(cred)\n//     .then((newpwd, chknewpwd) => {\n//       if(newpwd !== chknewpwd){\n//         alert('입력하신 새로운 비밀번호가 다릅니다.')\n//       } else{\n//         user.updatePassword(newpwd)\n//         .then(() => {\n//           dispatch({type:'PWDUPDATE_SUCCESS'})\n//         }).catch((err) => {\n//           dispatch({type:'PWDUPDATE_ERROR', err})\n//         });\n//       }\n//     }).catch((err) => {\n//       dispatch({type: 'UPDATE_ERROR', err})\n//     });\n//   }\n// }\n\nexport const changePwd = (pwdInfo, history) => {\n  // const reauthenticate = (currentPassword) => {\n  //   let user = firebase.auth().currentUser;\n  //   let cred = firebase.auth.EmailAuthProvider.credential(\n  //     user.email, currentPassword);\n  //   return user.reauthenticateWithCredential(cred)\n  //   .catch((err) => {\n  //     alert('기존의 비밀번호를 재입력해주세요.')\n  //   })\n  // }\n  return dispatch => {\n    let user = firebase.auth().currentUser;\n    let cred = firebase.auth.EmailAuthProvider.credential(user.email, pwdInfo.oldpwd);\n    user.reauthenticateWithCredential(cred).then(() => {\n      if (pwdInfo.newpwd !== pwdInfo.chknewpwd) {\n        alert('변경할 비밀번호와 재입력 값이 다릅니다.');\n      } else {\n        user.updatePassword(pwdInfo.newpwd).then(() => {\n          dispatch({\n            type: 'PWDUPDATE_SUCCESS'\n          });\n          history.push('/');\n        }).catch(err => {\n          dispatch({\n            type: 'PWDUPDATE_ERROR',\n            err\n          });\n        });\n      }\n    }).catch(err => {\n      dispatch({\n        type: 'REAUTHENTICATE_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const resetPwdEmail = user => {\n  return dispatch => {\n    firebase.auth().sendPasswordResetEmail(user.email).then(() => {\n      dispatch({\n        type: 'SENDRESETEMAIL_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'SENDRESETEMAIL_ERROR'\n      }, err);\n    });\n  };\n};\nexport const forgotEmail = userData => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    let docRef = firestore.collection(\"users\").where(\"firstName\", \"==\", userData.name).where(\"phoneNumber\", \"==\", userData.tel);\n    docRef.get().then(querySnapshot => {\n      if (querySnapshot.docs[0]) {\n        alert('가입하신 이메일 주소는 ' + querySnapshot.docs[0].data().email + ' 입니다.');\n      } else {\n        alert('입력하신 정보로 가입된 이메일이 없습니다.');\n      } // querySnapshot.forEach((doc) => {\n      //   if (doc.exists) {\n      //     alert('가입하신 이메일 주소는 ' + doc.data().email + ' 입니다.');\n      //   } else {\n      //   }\n      // })\n\n    }).then(() => {\n      dispatch({\n        type: 'EMAIL_FIND_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'EMAIL_FIND_ERROR'\n      });\n    });\n  };\n};\nexport const sendEmailVerification = user => {\n  return dispatch => {\n    let user = firebase.auth().currentUser;\n    user.sendEmailVerification().then(() => {\n      dispatch({\n        type: 'SENDEMAILVERIFICATION_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'SENDEMAILVERIFICATION_ERROR'\n      }, err);\n    });\n  };\n};\nexport const profileImgRegister = (profileImg, profiles) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const userProfile = getState().firebase.profile;\n    const docRef = firestore.collection('users').doc(userAuth.uid);\n    const chatRealtimImg = firestore.collection('chats').doc('realtimeImg');\n    const storageRef = firebase.storage().ref('images/users/' + docRef.id).child('profileImg');\n    storageRef.put(profileImg.profile_img).then(() => storageRef.getDownloadURL().then(url => {\n      docRef.update({\n        profileImgURL: url\n      });\n      chatRealtimImg.update({\n        [userProfile.initials]: url\n      });\n    })) // .then(() => {\n    //   docRef.update({\n    //     profileImgURL: 'gs://myom-d144a.appspot.com/images/users/' + userAuth.uid + '/profileImg'\n    //   })\n    // })\n    // .then(() => {\n    //   firebase.storage().refFromURL('gs://myom-d144a.appspot.com/images/users/' + userAuth.uid + '/profileImg').getDownloadURL().then(url => profiles.map(profile => profile.src = url));\n    // })\n    .then(() => {\n      dispatch({\n        type: 'PROFILEIMGREGISTER_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'PROFILEIMGREGISTER_ERROR',\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/src/store/actions/authAction.js"],"names":["firebase","signIn","cred","dispatch","auth","setPersistence","Auth","Persistence","SESSION","then","signInWithEmailAndPassword","email","password","type","catch","err","code","signOut","getState","getFirestore","window","location","href","signUp","newUser","firestore","batch","userNicknames","collection","doc","get","userNicknamesList","data","nickname","createUserWithEmailAndPassword","res","usersRef","user","uid","set","firstName","initials","authority","profileImgURL","condition_checked","privacy_checked","emailRecieve_checked","timeStamp","Date","birth","phoneNumber","merge","commit","withdrawal","userInfo","currentUser","userProfile","profile","alert","delete","update","FieldValue","changePwd","pwdInfo","history","EmailAuthProvider","credential","oldpwd","reauthenticateWithCredential","newpwd","chknewpwd","updatePassword","push","resetPwdEmail","sendPasswordResetEmail","forgotEmail","userData","docRef","where","name","tel","querySnapshot","docs","sendEmailVerification","profileImgRegister","profileImg","profiles","userAuth","chatRealtimImg","storageRef","storage","ref","id","child","put","profile_img","getDownloadURL","url"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\n// import 'firebase/firestore';\n// import 'firebase/auth';\n\nexport const signIn = (cred) => {\n  return(dispatch) => {\n    firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)\n    .then(() => firebase.auth().signInWithEmailAndPassword(\n      cred.email,\n      cred.password\n    ))\n    .then(() => dispatch({type:'LOGIN_SUCCESS'}))\n    .catch((err) => {\n      switch(err.code) {\n        case 'auth/user-not-found' :\n          dispatch({type: 'NO_REGISTER_EMAIL_ERROR'});\n          break;\n        case 'auth/wrong-password' :\n          dispatch({type: 'WRONG_PASSWORD_ERROR'});\n          break;\n        default :\n          dispatch({type: 'LOGIN_ERROR', err});\n      }\n    })\n  }\n}\n\nexport const signOut = () => {\n  return(dispatch, getState, { getFirestore }) => {\n    // const firestore = getFirestore();\n    // const userProfile = getState().firebase.profile;\n    // const userChats = firestore.collection('chats').where('users_email', 'array-contains', userProfile.email);\n    // const userChats = firestore.collection('chats').doc('1234@naver.com:acrkdduf@naver.com');\n\n    // userChats.update({\n    //   Logout: true,\n    // })\n    // userChats.get()\n    // .then(snapshot => Promise.all())\n    // .then(snapshot => {\n    //   snapshot.forEach(doc => {\n    //     const chatRef = firestore.collection('chats').doc(doc.id);\n    //     return chatRef.update({\n    //       ['isJoined_' + userProfile.initials]: false,\n    //     });\n    //   })\n    // })\n    firebase.auth().signOut()\n    .then(() => window.location.href = '/')\n    .then(() => dispatch({type: 'SIGNOUT_SUCCESS'}))\n  }\n}\n\nexport const signUp = (newUser) => {\n  return(dispatch, getState, { getFirestore }) => {\n    //const firebase = getFirebase();\n    const firestore = getFirestore();\n    const batch = firestore.batch();\n    const userNicknames = firestore.collection('users').doc('userNicknames');\n\n    userNicknames.get()\n    .then(doc => {\n      const userNicknamesList = doc.data();\n      if (userNicknamesList[newUser.nickname]) throw { code: 'auth/duplicate-nickname' }\n    })\n    .then(() => {\n      firebase.auth().createUserWithEmailAndPassword(\n        newUser.email,\n        newUser.password\n      )\n      .then((res) => {\n        const usersRef =  firestore.collection('users').doc(res.user.uid);\n        batch.set(usersRef, {\n          firstName: newUser.firstName,\n          initials: newUser.nickname,\n          email: newUser.email,\n          authority: 'user',\n          profileImgURL: '/img/defaults/userProfile.jpeg',\n          condition_checked: newUser.condition_checked,\n          privacy_checked: newUser.privacy_checked,\n          emailRecieve_checked: newUser.emailRecieve_checked,\n          timeStamp: new Date(),\n          birth: newUser.birth,\n          phoneNumber: newUser.phoneNumber,\n        });\n        batch.set(userNicknames, {\n          [newUser.nickname]: true,\n        }, {merge: true});\n      })\n      .then(() => {\n        batch.commit();\n        dispatch({type: 'SIGNUP_SUCCESS'})\n      })\n    }) \n    .catch((err) => {\n      switch(err.code) {\n        case 'auth/email-already-in-use':\n          dispatch({type: 'EMAILUSED_ERROR'});\n          break;\n        case 'auth/invalid-email':\n          dispatch({type: 'EMAILINVALID_ERROR'});\n          break;\n        case 'auth/operation-not-allowed':\n          dispatch({type: 'OPERATION_ERROR'});\n          break;\n        case 'auth/weak-password':\n          dispatch({type: 'WEAKPWD_ERROR'});\n          break;\n        case 'auth/duplicate-nickname':\n          dispatch({type: 'SIGNUP_NICKNAME_ERROR'});\n          break;\n\n        default: \n          dispatch({type: 'SIGNUP_ERROR', err});\n      }\n    })\n  }\n}\n\nexport const withdrawal = (user) => {\n  return(dispatch, getState, { getFirestore }) =>{\n    //const firebase = getFirebase();\n    const userInfo = firebase.auth().currentUser;\n    const userProfile = getState().firebase.profile;\n    const firestore = getFirestore();\n    const userNicknames = firestore.collection('users').doc('userNicknames');\n\n    if(user.email !== userInfo.email) {\n      alert('아이디가 일치하지 않습니다');\n      return;\n    } else {\n      userInfo.delete()\n      .then(() => {\n        firestore.collection('users').doc(userInfo.uid).delete();\n      })\n      .then(() => {\n        userNicknames.update({\n          [userProfile.initials]: firebase.firestore.FieldValue.delete()\n        });\n      })\n      .then(() => {\n        window.location.href = '/';\n        dispatch({type: 'DELETE_SUCCESS'})\n      })\n      .catch((err) => {\n        switch(err.code) {\n          case 'auth/requires-recent-login':\n            dispatch({type: 'DELETE_RECENT_LOGIN_ERROR'}); \n            break;\n            \n          default:\n            dispatch({type: 'DELETE_ERROR', err});\n        }\n      });\n    }\n  }\n}\n\n// export const changePwd = (email, oldpwd, newpwd, chknewpwd) => {\n//   return(dispatch) => {\n//     let user = firebase.auth().currentUser;\n//     let cred = firebase.auth.EmailAuthProvider.credential(email, oldpwd)\n//     user.reauthenticateWithCredential(cred)\n//     .then((newpwd, chknewpwd) => {\n//       if(newpwd !== chknewpwd){\n//         alert('입력하신 새로운 비밀번호가 다릅니다.')\n//       } else{\n//         user.updatePassword(newpwd)\n//         .then(() => {\n//           dispatch({type:'PWDUPDATE_SUCCESS'})\n//         }).catch((err) => {\n//           dispatch({type:'PWDUPDATE_ERROR', err})\n//         });\n//       }\n//     }).catch((err) => {\n//       dispatch({type: 'UPDATE_ERROR', err})\n//     });\n//   }\n// }\n\nexport const changePwd = (pwdInfo, history) => {\n  // const reauthenticate = (currentPassword) => {\n  //   let user = firebase.auth().currentUser;\n  //   let cred = firebase.auth.EmailAuthProvider.credential(\n  //     user.email, currentPassword);\n  //   return user.reauthenticateWithCredential(cred)\n  //   .catch((err) => {\n  //     alert('기존의 비밀번호를 재입력해주세요.')\n  //   })\n  // }\n  return(dispatch) => {\n    let user = firebase.auth().currentUser;\n    let cred = firebase.auth.EmailAuthProvider.credential(user.email, pwdInfo.oldpwd);\n    user.reauthenticateWithCredential(cred).then(() => {\n      if(pwdInfo.newpwd !== pwdInfo.chknewpwd){\n        alert('변경할 비밀번호와 재입력 값이 다릅니다.');\n      }else{\n        user.updatePassword(pwdInfo.newpwd).then(() =>{\n          dispatch({type: 'PWDUPDATE_SUCCESS'});\n          history.push('/');\n        }).catch((err) => {\n          dispatch({type:'PWDUPDATE_ERROR', err});\n        });\n      }\n    }).catch((err) => {\n      dispatch({type:'REAUTHENTICATE_ERROR', err});\n    });\n  }\n}\n\nexport const resetPwdEmail = (user) => {\n  return(dispatch) => {\n    firebase.auth().sendPasswordResetEmail(user.email)\n    .then(()=> {\n      dispatch({type: 'SENDRESETEMAIL_SUCCESS'});\n    }).catch((err) => {\n      dispatch({type: 'SENDRESETEMAIL_ERROR'}, err);\n    });\n  }\n}\n\nexport const forgotEmail = (userData) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    let docRef = firestore.collection(\"users\").where(\"firstName\", \"==\", userData.name).where(\"phoneNumber\", \"==\", userData.tel);\n    docRef.get().then((querySnapshot) => {\n      if(querySnapshot.docs[0]){\n        alert('가입하신 이메일 주소는 ' + querySnapshot.docs[0].data().email + ' 입니다.');\n      } else{\n        alert('입력하신 정보로 가입된 이메일이 없습니다.');\n      }\n      // querySnapshot.forEach((doc) => {\n      //   if (doc.exists) {\n      //     alert('가입하신 이메일 주소는 ' + doc.data().email + ' 입니다.');\n      //   } else {\n          \n      //   }\n      // })\n    })\n    .then(() => {\n      dispatch({type: 'EMAIL_FIND_SUCCESS'});\n    }).catch((err) => {\n      dispatch({type: 'EMAIL_FIND_ERROR'});\n    })\n  }\n}\n\nexport const sendEmailVerification = (user) => {\n  return(dispatch) => {\n    let user = firebase.auth().currentUser;\n    user.sendEmailVerification()\n    .then(() => {\n      dispatch({type: 'SENDEMAILVERIFICATION_SUCCESS'});\n    }).catch((err) => {\n      dispatch({type: 'SENDEMAILVERIFICATION_ERROR'}, err)\n    });\n  }\n}\n\nexport const profileImgRegister = (profileImg, profiles) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const userProfile = getState().firebase.profile;\n    const docRef = firestore.collection('users').doc(userAuth.uid);\n    const chatRealtimImg = firestore.collection('chats').doc('realtimeImg');\n    const storageRef = firebase.storage().ref('images/users/' + docRef.id).child('profileImg');\n\n    storageRef.put(profileImg.profile_img)\n    .then(() => storageRef.getDownloadURL().then(url => {\n      docRef.update({\n        profileImgURL: url,\n      })\n      chatRealtimImg.update({\n        [userProfile.initials]: url,\n      })\n    }))\n    // .then(() => {\n    //   docRef.update({\n    //     profileImgURL: 'gs://myom-d144a.appspot.com/images/users/' + userAuth.uid + '/profileImg'\n    //   })\n    // })\n    // .then(() => {\n    //   firebase.storage().refFromURL('gs://myom-d144a.appspot.com/images/users/' + userAuth.uid + '/profileImg').getDownloadURL().then(url => profiles.map(profile => profile.src = url));\n    // })\n\n    .then(()=>{\n      dispatch({type: 'PROFILEIMGREGISTER_SUCCESS'});\n    }).catch((err) => {\n      dispatch({type: 'PROFILEIMGREGISTER_ERROR', err});\n    })\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}