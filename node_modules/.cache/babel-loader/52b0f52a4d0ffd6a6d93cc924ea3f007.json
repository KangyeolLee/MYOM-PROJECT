{"ast":null,"code":"import firebase from 'firebase/app';\nexport const sendMessage = (chatData, chatId) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const docRef = firestore.collection('chats').doc(chatId);\n    const chattingRoom = document.querySelector('.chattingViewport');\n    const storageRef = chatData.file ? firebase.storage().ref('files/chats/' + docRef.id).child(new Date().getTime() + '/' + chatData.fileName) : null;\n    const messagesParent = chatData.file ? document.querySelector('.file-upload-area') : null;\n    const currentLength = chatData.file ? [...messagesParent.children].filter(uploading => uploading.className.includes('uploadingMessage')).length + 1 : null;\n    const uploadingMessage = chatData.file ? document.createElement('div') : null;\n    const fileIconImg = chatData.file ? chatData.file_type === 'img' ? 'image' : chatData.file_type === 'video' ? 'movie' : 'folder' : null;\n    const uploadProgress = chatData.file ? '<div class=\"file-message right\"><div id=\"message-file-loader' + currentLength + '\" class=\"progress\"><div class=\"determinate\"></div></div><div class=\"file-downloader\"><p class=\"download-file\"><i class=\"material-icons file-img\">' + fileIconImg + '</i><span>' + chatData.fileName + '</span></p></div></div>' : null;\n\n    async function uploadTaskPromise(file) {\n      return new Promise(function (resolve, reject) {\n        const uploadTask = storageRef.put(file); // docRef.update({ fileUploading: true });\n\n        uploadingMessage.id = 'willRemove' + currentLength;\n        uploadingMessage.className = 'message inRight uploadingMessage';\n        uploadingMessage.innerHTML = uploadProgress;\n        messagesParent.appendChild(uploadingMessage); // uploadingMessage.style.transform = 'translateY('+pullHeight+'%)';\n\n        uploadTask.on('state_changed', function (snapshot) {\n          if (chattingRoom) chattingRoom.scrollTop = chattingRoom.scrollHeight;\n          let progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n          let loader = document.querySelector('#message-file-loader' + currentLength);\n          let determinate = document.querySelector('#message-file-loader' + currentLength + ' .determinate');\n          loader.style.display = 'block';\n          determinate.style.width = progress + '%';\n        }, function (err) {\n          switch (err.code) {\n            case 'storage/unauthorized':\n              console.log('no authorization');\n              break;\n\n            case 'storage/canceled':\n              console.log('canceled');\n              break;\n\n            case 'storage/unknown':\n              console.log('unknown error');\n              break;\n          }\n        }, function complete() {\n          uploadTask.snapshot.ref.getDownloadURL().then(url => resolve(url));\n        });\n      });\n    }\n\n    if (chatData.file) {\n      const getFileURL = async file => {\n        const url = await uploadTaskPromise(file);\n        docRef.update({\n          messages: firebase.firestore.FieldValue.arrayUnion({\n            sender: chatData.sender,\n            file: url,\n            fileName: chatData.fileName,\n            file_type: chatData.file_type,\n            sendAt: new Date(),\n            fileUploading: true\n          }),\n          updatedAt: new Date(),\n          isChecked: false,\n          lastMessageSender: chatData.sender,\n          fileUploading: false\n        }).then(() => {\n          const uploadingMessage = document.querySelector('#willRemove' + currentLength);\n          uploadingMessage.parentElement.removeChild(uploadingMessage);\n          docRef.get().then(doc => {\n            const partner = doc.data().users_nickName.filter(nickname => nickname !== chatData.sender).join();\n            const isJoined = doc.data()['isJoined_' + partner];\n            if (isJoined) return docRef.update({\n              isChecked: true\n            });\n          });\n        }).then(() => {\n          dispatch({\n            type: 'SEND_MESSAGE_SUCCESS'\n          });\n        }).catch(err => dispatch({\n          type: 'SEND_MESSAGE_ERROR'\n        }, err));\n      };\n\n      getFileURL(chatData.file);\n    } else {\n      docRef.update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: chatData.sender,\n          message: chatData.message,\n          sendAt: new Date()\n        }),\n        updatedAt: new Date(),\n        isChecked: false,\n        lastMessageSender: chatData.sender\n      }).then(() => {\n        docRef.get().then(doc => {\n          const partner = doc.data().users_nickName.filter(nickname => nickname !== chatData.sender).join();\n          const isJoined = doc.data()['isJoined_' + partner];\n          if (isJoined) return docRef.update({\n            isChecked: true\n          });\n        });\n      }).then(() => dispatch({\n        type: 'SEND_MESSAGE_SUCCESS'\n      })).catch(err => dispatch({\n        type: 'SEND_MESSAGE_ERROR'\n      }, err));\n    } // \tif(chatData.file) {\n    // \t\tstorageRef.put(chatData.file)\n    // \t\t.then(()=> {\n    // \t\t\tstorageRef.getDownloadURL()\n    // \t\t\t.then((url) => {\n    // \t\t\t\t// let httpsReference = firebase.storage().refFromURL(url);\n    // \t\t\t\t// console.log(httpsReference);\n    // \t\t\t\t// console.log(url);\n    // \t\t\t\tdocRef.update({\n    // \t\t\t\t\tmessages: firebase.firestore.FieldValue.arrayUnion({\n    // \t\t\t\t\t\tsender: chatData.sender,\n    // \t\t\t\t\t\tfile: url,\n    //             fileName: chatData.fileName,\n    //             file_type: chatData.file_type,\n    //             sendAt: new Date(), \n    // \t\t\t\t\t}),\n    //           updatedAt: new Date(),\n    //           isChecked: false,\n    //           // receiverHasRead: false,\n    //           // ['readMark_' + chatData.sender]: false,\n    //           lastMessageSender: chatData.sender,\n    //         })\n    //         .then(() => {\n    //           docRef.get().then(doc => {\n    //             const partner = doc.data().users_nickName.filter(nickname => nickname !== chatData.sender).join();\n    //             const isJoined = doc.data()['isJoined_' + partner];\n    //             if(isJoined) return docRef.update({\n    //               isChecked: true,\n    //             })\n    //           })\n    //         })\n    //       })\n    // \t\t})\n    // \t} else{\n    // \t\t\tdocRef.update({\n    // \t\t\t\tmessages: firebase.firestore.FieldValue.arrayUnion({\n    // \t\t\t\t\tsender: chatData.sender,\n    // \t\t\t\t\tmessage: chatData.message,\n    //           sendAt: new Date(),\n    // \t\t\t\t}),\n    //         updatedAt: new Date(),\n    //         isChecked: false,\n    //         // receiverHasRead: false,\n    //         // ['readMark_' + chatData.sender]: false,\n    //         lastMessageSender: chatData.sender,\n    //       })\n    //       .then(() => {\n    //         docRef.get().then(doc => {\n    //           const partner = doc.data().users_nickName.filter(nickname => nickname !== chatData.sender).join();\n    //           const isJoined = doc.data()['isJoined_' + partner];\n    //           if(isJoined) return docRef.update({\n    //             isChecked: true,\n    //           })\n    //         })\n    //       })\n    // \t\t\t.then(()=> {\n    // \t\t\t\tdispatch({type: 'SEND_MESSAGE_SUCCESS'})\n    // \t\t\t}).catch((err) => {\n    // \t\t\t\tdispatch({type: 'SEND_MESSAGE_ERROR'}, err)\n    // \t\t\t});\n    // \t\t}\n\n  };\n};\nexport const readMessage = chatId => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userProfile = getState().firebase.profile;\n    const userChats = firestore.collection('chats').doc(chatId);\n    userChats.get().then(doc => {\n      const lastMessageSender = doc.data().lastMessageSender;\n      if (lastMessageSender === userProfile.initials) return userChats.update({\n        ['isJoined_' + userProfile.initials]: true\n      });else return userChats.update({\n        isChecked: true,\n        ['isJoined_' + userProfile.initials]: true\n      });\n    }) // userChats.update({\n    //   ['isJoined_' + userProfile.initials]: true,\n    // })\n    .then(() => {\n      dispatch({\n        type: 'READ_MESSAGE_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'READ_MESSAGE_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const isCheck_status = chatId => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userProfile = getState().firebase.profile;\n    const userChats = firestore.collection('chats').doc(chatId); // userChats.get()\n    // .then(doc => {\n    //   const lastMessageSender = doc.data().lastMessageSender\n    //   if(lastMessageSender === userProfile.initials) return userChats.update({\n    //     ['isJoined_' + userProfile.initials]: false,\n    //   })\n    //   else return userChats.update({\n    //     isChecked: true,\n    //     ['isJoined_' + userProfile.initials]: false,\n    //   }) \n    // })\n\n    userChats.update({\n      ['isJoined_' + userProfile.initials]: false\n    }).then(() => {\n      dispatch({\n        type: 'ROOM_CHECK_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'ROOM_CHECK_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const initAll_joinedRooms = () => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userProfile = getState().firebase.profile; // async function _init() {\n    //   const AllChats = await userChats.get();\n    //   AllChats.forEach(doc => {\n    //     const chatRef = firestore.colletcion('chats').doc(doc.id);\n    //     return chatRef.update({\n    //       ['isJoined_' + userProfile.initials]: false,\n    //     })\n    //   })\n    // }\n\n    if (userProfile.email !== undefined) {\n      const userChats = firestore.collection('chats').where('users_email', 'array-contains', userProfile.email);\n      userChats.get().then(snapshot => {\n        snapshot.forEach(doc => {\n          const chatRef = firestore.collection('chats').doc(doc.id);\n          return chatRef.update({\n            ['isJoined_' + userProfile.initials]: false\n          });\n        });\n      }).then(() => dispatch({\n        type: 'INITALL_JOINEDROOMS_SUCCESS'\n      })).catch(err => dispatch({\n        type: 'INITALL_JOINEDROOMS_ERROR',\n        err\n      }));\n    } else return;\n  };\n};\nexport const _initJoin_login = async () => {\n  console.log('--------------start-----------------');\n  const db = firebase.firestore();\n  const user = firebase.auth().currentUser;\n\n  if (user) {\n    const email = user.email;\n    const uid = user.uid;\n    const userChats = db.collection('chats').where('users_email', 'array-contains', email);\n    const users = db.collection('users').doc(uid);\n    const nickname = await users.get().then(doc => doc.data().initials);\n    userChats.get().then(snapshot => {\n      snapshot.forEach(doc => {\n        const chatRef = db.collection('chats').doc(doc.id);\n        return chatRef.update({\n          ['isJoined_' + nickname]: false\n        });\n      });\n    });\n  }\n};","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/src/store/actions/chatAction.js"],"names":["firebase","sendMessage","chatData","chatId","dispatch","getState","getFirestore","firestore","docRef","collection","doc","chattingRoom","document","querySelector","storageRef","file","storage","ref","id","child","Date","getTime","fileName","messagesParent","currentLength","children","filter","uploading","className","includes","length","uploadingMessage","createElement","fileIconImg","file_type","uploadProgress","uploadTaskPromise","Promise","resolve","reject","uploadTask","put","innerHTML","appendChild","on","snapshot","scrollTop","scrollHeight","progress","bytesTransferred","totalBytes","loader","determinate","style","display","width","err","code","console","log","complete","getDownloadURL","then","url","getFileURL","update","messages","FieldValue","arrayUnion","sender","sendAt","fileUploading","updatedAt","isChecked","lastMessageSender","parentElement","removeChild","get","partner","data","users_nickName","nickname","join","isJoined","type","catch","message","readMessage","userProfile","profile","userChats","initials","isCheck_status","initAll_joinedRooms","email","undefined","where","forEach","chatRef","_initJoin_login","db","user","auth","currentUser","uid","users"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\n\nexport const sendMessage = (chatData, chatId) => {\n\treturn(dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const docRef = firestore.collection('chats').doc(chatId);\n    const chattingRoom = document.querySelector('.chattingViewport');\n    const storageRef = (chatData.file) ? firebase.storage().ref('files/chats/' + docRef.id).child(new Date().getTime() + '/' + chatData.fileName) : null;\n    const messagesParent = (chatData.file) ? document.querySelector('.file-upload-area') : null;\n    const currentLength = (chatData.file) ? [...messagesParent.children].filter(uploading => uploading.className.includes('uploadingMessage')).length + 1 : null;\n    const uploadingMessage = (chatData.file) ? document.createElement('div') : null;\n    const fileIconImg = (chatData.file) ? chatData.file_type === 'img' ? 'image' : chatData.file_type === 'video' ? 'movie' : 'folder' : null;\n    const uploadProgress = (chatData.file) ? '<div class=\"file-message right\"><div id=\"message-file-loader'+ currentLength +'\" class=\"progress\"><div class=\"determinate\"></div></div><div class=\"file-downloader\"><p class=\"download-file\"><i class=\"material-icons file-img\">'+fileIconImg+'</i><span>'+chatData.fileName+'</span></p></div></div>' : null;\n    \n\n    async function uploadTaskPromise(file) {\n      return new Promise(function(resolve, reject) {\n        const uploadTask = storageRef.put(file);\n        // docRef.update({ fileUploading: true });\n        uploadingMessage.id = 'willRemove'+ currentLength;\n        uploadingMessage.className = 'message inRight uploadingMessage';\n        uploadingMessage.innerHTML = uploadProgress;\n        messagesParent.appendChild(uploadingMessage);\n        // uploadingMessage.style.transform = 'translateY('+pullHeight+'%)';\n\n        uploadTask.on('state_changed', function(snapshot) {\n          if(chattingRoom) chattingRoom.scrollTop = chattingRoom.scrollHeight;\n\n          let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          let loader = document.querySelector('#message-file-loader' + currentLength);\n          let determinate = document.querySelector('#message-file-loader'+currentLength+' .determinate')\n\n          loader.style.display = 'block';\n          determinate.style.width = progress + '%';\n          \n        }, function(err) {\n          switch(err.code) {\n            case 'storage/unauthorized':\n              console.log('no authorization')\n              break;\n            \n            case 'storage/canceled':\n              console.log('canceled')\n              break;\n            \n            case 'storage/unknown':\n              console.log('unknown error');\n              break;\n          }\n        }, function complete() {\n          uploadTask.snapshot.ref.getDownloadURL().then(url => resolve(url))\n        })\n      })\n    }\n    \n    if(chatData.file) {\n      const getFileURL = async (file) => {\n        const url = await uploadTaskPromise(file);\n        docRef.update({ \n          messages: firebase.firestore.FieldValue.arrayUnion({\n            sender: chatData.sender,\n            file: url,\n            fileName: chatData.fileName,\n            file_type: chatData.file_type,\n            sendAt: new Date(),\n            fileUploading: true,\n          }),\n          updatedAt: new Date(),\n          isChecked: false,\n          lastMessageSender: chatData.sender,\n          fileUploading: false,\n        })\n        .then(() => {\n          const uploadingMessage = document.querySelector('#willRemove' + currentLength);\n          uploadingMessage.parentElement.removeChild(uploadingMessage);\n\n          docRef.get().then(doc => {\n            const partner = doc.data().users_nickName.filter(nickname => nickname !== chatData.sender).join();\n            const isJoined = doc.data()['isJoined_' + partner];\n            if(isJoined) return docRef.update({\n              isChecked: true,\n            })\n          })\n        })\n        .then(() => {\n          dispatch({type: 'SEND_MESSAGE_SUCCESS'})\n        })\n        .catch(err => dispatch({type: 'SEND_MESSAGE_ERROR'}, err))\n      };\n\n      getFileURL(chatData.file);\n\n    } else {\n      docRef.update({\n        messages: firebase.firestore.FieldValue.arrayUnion({\n          sender: chatData.sender,\n          message: chatData.message,\n          sendAt: new Date(),\n        }),\n        updatedAt: new Date(),\n        isChecked: false,\n        lastMessageSender: chatData.sender,\n      })\n      .then(() => {\n        docRef.get().then(doc => {\n          const partner = doc.data().users_nickName.filter(nickname => nickname !== chatData.sender).join();\n          const isJoined = doc.data()['isJoined_' + partner];\n          if(isJoined) return docRef.update({\n            isChecked: true,\n          })\n        })\n      })\n      .then(() => dispatch({type: 'SEND_MESSAGE_SUCCESS'}))\n      .catch(err => dispatch({type: 'SEND_MESSAGE_ERROR'}, err))\n    }\n\t// \tif(chatData.file) {\n\t// \t\tstorageRef.put(chatData.file)\n\t// \t\t.then(()=> {\n\t// \t\t\tstorageRef.getDownloadURL()\n\t// \t\t\t.then((url) => {\n\t// \t\t\t\t// let httpsReference = firebase.storage().refFromURL(url);\n\t// \t\t\t\t// console.log(httpsReference);\n\t// \t\t\t\t// console.log(url);\n\t// \t\t\t\tdocRef.update({\n\t// \t\t\t\t\tmessages: firebase.firestore.FieldValue.arrayUnion({\n\t// \t\t\t\t\t\tsender: chatData.sender,\n\t// \t\t\t\t\t\tfile: url,\n  //             fileName: chatData.fileName,\n  //             file_type: chatData.file_type,\n  //             sendAt: new Date(), \n\t// \t\t\t\t\t}),\n  //           updatedAt: new Date(),\n  //           isChecked: false,\n  //           // receiverHasRead: false,\n  //           // ['readMark_' + chatData.sender]: false,\n  //           lastMessageSender: chatData.sender,\n  //         })\n  //         .then(() => {\n  //           docRef.get().then(doc => {\n  //             const partner = doc.data().users_nickName.filter(nickname => nickname !== chatData.sender).join();\n  //             const isJoined = doc.data()['isJoined_' + partner];\n              \n  //             if(isJoined) return docRef.update({\n  //               isChecked: true,\n  //             })\n  //           })\n  //         })\n  //       })\n\t// \t\t})\n\t// \t} else{\n\t// \t\t\tdocRef.update({\n\t// \t\t\t\tmessages: firebase.firestore.FieldValue.arrayUnion({\n\t// \t\t\t\t\tsender: chatData.sender,\n\t// \t\t\t\t\tmessage: chatData.message,\n  //           sendAt: new Date(),\n\t// \t\t\t\t}),\n  //         updatedAt: new Date(),\n  //         isChecked: false,\n  //         // receiverHasRead: false,\n  //         // ['readMark_' + chatData.sender]: false,\n  //         lastMessageSender: chatData.sender,\n  //       })\n  //       .then(() => {\n  //         docRef.get().then(doc => {\n  //           const partner = doc.data().users_nickName.filter(nickname => nickname !== chatData.sender).join();\n  //           const isJoined = doc.data()['isJoined_' + partner];\n            \n  //           if(isJoined) return docRef.update({\n  //             isChecked: true,\n  //           })\n  //         })\n  //       })\n\t// \t\t\t.then(()=> {\n\t// \t\t\t\tdispatch({type: 'SEND_MESSAGE_SUCCESS'})\n\t// \t\t\t}).catch((err) => {\n\t// \t\t\t\tdispatch({type: 'SEND_MESSAGE_ERROR'}, err)\n\t// \t\t\t});\n\t// \t\t}\n\t}\n}\n\nexport const readMessage = (chatId) => {\n\treturn(dispatch, getState, { getFirestore}) => {\n    const firestore = getFirestore();\n    const userProfile = getState().firebase.profile;\n    const userChats = firestore.collection('chats').doc(chatId);\n\n    userChats.get()\n    .then(doc => {\n      const lastMessageSender = doc.data().lastMessageSender\n\n      if(lastMessageSender === userProfile.initials) return userChats.update({\n        ['isJoined_' + userProfile.initials]: true,\n      })\n      else return userChats.update({\n        isChecked: true,\n        ['isJoined_' + userProfile.initials]: true,\n      }) \n    })\n\n\t\t// userChats.update({\n    //   ['isJoined_' + userProfile.initials]: true,\n    // })\n    \n\t\t.then(() => {\n\t\t\tdispatch({type: 'READ_MESSAGE_SUCCESS'})\n\t\t}).catch((err) => {\n\t\t\tdispatch({type: 'READ_MESSAGE_ERROR', err})\n\t\t});\n\t}\n}\n\nexport const isCheck_status = (chatId) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userProfile = getState().firebase.profile;\n    const userChats = firestore.collection('chats').doc(chatId);\n    \n    // userChats.get()\n    // .then(doc => {\n    //   const lastMessageSender = doc.data().lastMessageSender\n\n    //   if(lastMessageSender === userProfile.initials) return userChats.update({\n    //     ['isJoined_' + userProfile.initials]: false,\n    //   })\n    //   else return userChats.update({\n    //     isChecked: true,\n    //     ['isJoined_' + userProfile.initials]: false,\n    //   }) \n    // })\n\n\t\tuserChats.update({\n      ['isJoined_' + userProfile.initials]: false,\n    })\n\n    .then(() => {\n      dispatch({ type : 'ROOM_CHECK_SUCCESS' })\n    })\n    .catch((err) => {\n      dispatch({ type : 'ROOM_CHECK_ERROR', err })\n    })\n  }\n}\n\nexport const initAll_joinedRooms = () => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userProfile = getState().firebase.profile;\n\n    // async function _init() {\n    //   const AllChats = await userChats.get();\n    //   AllChats.forEach(doc => {\n    //     const chatRef = firestore.colletcion('chats').doc(doc.id);\n    //     return chatRef.update({\n    //       ['isJoined_' + userProfile.initials]: false,\n    //     })\n    //   })\n    // }\n\n    if(userProfile.email !== undefined) {\n      const userChats = firestore.collection('chats').where('users_email', 'array-contains', userProfile.email);\n\n      userChats.get()\n      .then(snapshot => {\n        snapshot.forEach(doc => {\n          const chatRef = firestore.collection('chats').doc(doc.id)\n  \n          return chatRef.update({\n            ['isJoined_' + userProfile.initials]: false,\n          });\n        })\n      })\n      .then(() => dispatch({type: 'INITALL_JOINEDROOMS_SUCCESS'}))\n      .catch((err) => dispatch({type: 'INITALL_JOINEDROOMS_ERROR', err}))\n    }\n    else return;\n  }\n}\n\nexport const _initJoin_login = async () => {\n  console.log('--------------start-----------------')\n  const db = firebase.firestore();\n  const user = firebase.auth().currentUser;\n  \n  if(user) {\n    const email = user.email;\n    const uid = user.uid;\n    const userChats = db.collection('chats').where('users_email', 'array-contains', email);\n    const users = db.collection('users').doc(uid);\n    const nickname = await users.get().then(doc => doc.data().initials);\n\n    userChats.get()\n    .then(snapshot => {\n      snapshot.forEach(doc => {\n        const chatRef = db.collection('chats').doc(doc.id)\n        return chatRef.update({\n          ['isJoined_' + nickname]: false, \n        });\n      })\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}