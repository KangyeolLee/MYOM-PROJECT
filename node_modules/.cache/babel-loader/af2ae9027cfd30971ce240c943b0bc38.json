{"ast":null,"code":"import firebase from '@firebase/app';\nimport { __awaiter, __generator, __spread, __assign } from 'tslib';\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { openDb } from 'idb';\nvar version = \"0.2.7\";\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar PENDING_TIMEOUT_MS = 10000;\nvar PACKAGE_VERSION = \"w:\" + version;\nvar INTERNAL_AUTH_VERSION = 'FIS_v2';\nvar INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';\nvar TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nvar SERVICE = 'installations';\nvar SERVICE_NAME = 'Installations';\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar _a;\n\nvar ERROR_DESCRIPTION_MAP = (_a = {}, _a[\"missing-app-config-values\"\n/* MISSING_APP_CONFIG_VALUES */\n] = 'Missing App configuration values.', _a[\"create-installation-failed\"\n/* CREATE_INSTALLATION_FAILED */\n] = 'Could not register Firebase Installation.', _a[\"generate-token-failed\"\n/* GENERATE_TOKEN_FAILED */\n] = 'Could not generate Auth Token.', _a[\"not-registered\"\n/* NOT_REGISTERED */\n] = 'Firebase Installation is not registered.', _a[\"installation-not-found\"\n/* INSTALLATION_NOT_FOUND */\n] = 'Firebase Installation not found.', _a[\"request-failed\"\n/* REQUEST_FAILED */\n] = '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"', _a[\"app-offline\"\n/* APP_OFFLINE */\n] = 'Could not process request. Application offline.', _a[\"delete-pending-registration\"\n/* DELETE_PENDING_REGISTRATION */\n] = \"Can't delete installation while there is a pending registration request.\", _a);\nvar ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\n\nfunction isServerError(error) {\n  return error instanceof FirebaseError && error.code.includes(\"request-failed\"\n  /* REQUEST_FAILED */\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction extractAppConfig(app) {\n  if (!app || !app.options) {\n    throw ERROR_FACTORY.create(\"missing-app-config-values\"\n    /* MISSING_APP_CONFIG_VALUES */\n    );\n  }\n\n  var appName = app.name;\n  var _a = app.options,\n      projectId = _a.projectId,\n      apiKey = _a.apiKey,\n      appId = _a.appId;\n\n  if (!appName || !projectId || !apiKey || !appId) {\n    throw ERROR_FACTORY.create(\"missing-app-config-values\"\n    /* MISSING_APP_CONFIG_VALUES */\n    );\n  }\n\n  return {\n    appName: appName,\n    projectId: projectId,\n    apiKey: apiKey,\n    appId: appId\n  };\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getInstallationsEndpoint(_a) {\n  var projectId = _a.projectId;\n  return INSTALLATIONS_API_URL + \"/projects/\" + projectId + \"/installations\";\n}\n\nfunction extractAuthTokenInfoFromResponse(response) {\n  return {\n    token: response.token,\n    requestStatus: 2\n    /* COMPLETED */\n    ,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nfunction getErrorFromResponse(requestName, response) {\n  return __awaiter(this, void 0, void 0, function () {\n    var responseJson, errorData;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 1:\n          responseJson = _a.sent();\n          errorData = responseJson.error;\n          return [2\n          /*return*/\n          , ERROR_FACTORY.create(\"request-failed\"\n          /* REQUEST_FAILED */\n          , {\n            requestName: requestName,\n            serverCode: errorData.code,\n            serverMessage: errorData.message,\n            serverStatus: errorData.status\n          })];\n      }\n    });\n  });\n}\n\nfunction getHeaders(_a) {\n  var apiKey = _a.apiKey;\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nfunction getHeadersWithAuth(appConfig, _a) {\n  var refreshToken = _a.refreshToken;\n  var headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n/**\r\n * Calls the passed in fetch wrapper and returns the response.\r\n * If the returned response has a status of 5xx, re-runs the function once and\r\n * returns the response.\r\n */\n\n\nfunction retryIfServerError(fn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var result;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , fn()];\n\n        case 1:\n          result = _a.sent();\n\n          if (result.status >= 500 && result.status < 600) {\n            // Internal Server Error. Retry request.\n            return [2\n            /*return*/\n            , fn()];\n          }\n\n          return [2\n          /*return*/\n          , result];\n      }\n    });\n  });\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn) {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken) {\n  return INTERNAL_AUTH_VERSION + \" \" + refreshToken;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction createInstallation(appConfig, _a) {\n  var fid = _a.fid;\n  return __awaiter(this, void 0, void 0, function () {\n    var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          endpoint = getInstallationsEndpoint(appConfig);\n          headers = getHeaders(appConfig);\n          body = {\n            fid: fid,\n            authVersion: INTERNAL_AUTH_VERSION,\n            appId: appConfig.appId,\n            sdkVersion: PACKAGE_VERSION\n          };\n          request = {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          return [4\n          /*yield*/\n          , retryIfServerError(function () {\n            return fetch(endpoint, request);\n          })];\n\n        case 1:\n          response = _b.sent();\n          if (!response.ok) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 2:\n          responseValue = _b.sent();\n          registeredInstallationEntry = {\n            fid: responseValue.fid || fid,\n            registrationStatus: 2\n            /* COMPLETED */\n            ,\n            refreshToken: responseValue.refreshToken,\n            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n          };\n          return [2\n          /*return*/\n          , registeredInstallationEntry];\n\n        case 3:\n          return [4\n          /*yield*/\n          , getErrorFromResponse('Create Installation', response)];\n\n        case 4:\n          throw _b.sent();\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Returns a promise that resolves after given time passes. */\n\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction bufferToBase64UrlSafe(array) {\n  var b64 = btoa(String.fromCharCode.apply(String, __spread(array)));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nvar INVALID_FID = '';\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\n\nfunction generateFid() {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    var fidByteArray = new Uint8Array(17);\n    var crypto_1 = self.crypto || self.msCrypto;\n    crypto_1.getRandomValues(fidByteArray); // Replace the first 4 random bits with the constant FID header of 0b0111.\n\n    fidByteArray[0] = 112 + fidByteArray[0] % 16;\n    var fid = encode(fidByteArray);\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch (_a) {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n/** Converts a FID Uint8Array to a base64 string representation. */\n\n\nfunction encode(fidByteArray) {\n  var b64String = bufferToBase64UrlSafe(fidByteArray); // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n\n  return b64String.substr(0, 22);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DATABASE_NAME = 'firebase-installations-database';\nvar DATABASE_VERSION = 1;\nvar OBJECT_STORE_NAME = 'firebase-installations-store';\nvar dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n\n  return dbPromise;\n}\n/** Assigns or overwrites the record for the given key with the given value. */\n\n\nfunction set(appConfig, value) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(appConfig);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4\n          /*yield*/\n          , tx.objectStore(OBJECT_STORE_NAME).put(value, key)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 3:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , value];\n      }\n    });\n  });\n}\n/** Removes record(s) from the objectStore that match the given key. */\n\n\nfunction remove(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(appConfig);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          return [4\n          /*yield*/\n          , tx.objectStore(OBJECT_STORE_NAME).delete(key)];\n\n        case 2:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 3:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Atomically updates a record with the result of updateFn, which gets\r\n * called with the current value. If newValue is undefined, the record is\r\n * deleted instead.\r\n * @return Updated value\r\n */\n\n\nfunction update(appConfig, updateFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var key, db, tx, store, oldValue, newValue;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          key = getKey(appConfig);\n          return [4\n          /*yield*/\n          , getDbPromise()];\n\n        case 1:\n          db = _a.sent();\n          tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n          store = tx.objectStore(OBJECT_STORE_NAME);\n          return [4\n          /*yield*/\n          , store.get(key)];\n\n        case 2:\n          oldValue = _a.sent();\n          newValue = updateFn(oldValue);\n\n          if (newValue === oldValue) {\n            return [2\n            /*return*/\n            , newValue];\n          }\n\n          if (!(newValue === undefined)) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , store.delete(key)];\n\n        case 3:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 4:\n          return [4\n          /*yield*/\n          , store.put(newValue, key)];\n\n        case 5:\n          _a.sent();\n\n          _a.label = 6;\n\n        case 6:\n          return [4\n          /*yield*/\n          , tx.complete];\n\n        case 7:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , newValue];\n      }\n    });\n  });\n}\n\nfunction getKey(appConfig) {\n  return appConfig.appName + \"!\" + appConfig.appId;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\n\n\nfunction getInstallationEntry(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var registrationPromise, installationEntry, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , update(appConfig, function (oldEntry) {\n            var installationEntry = updateOrCreateInstallationEntry(oldEntry);\n            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);\n            registrationPromise = entryWithPromise.registrationPromise;\n            return entryWithPromise.installationEntry;\n          })];\n\n        case 1:\n          installationEntry = _b.sent();\n          if (!(installationEntry.fid === INVALID_FID)) return [3\n          /*break*/\n          , 3];\n          _a = {};\n          return [4\n          /*yield*/\n          , registrationPromise];\n\n        case 2:\n          // FID generation failed. Waiting for the FID from the server.\n          return [2\n          /*return*/\n          , (_a.installationEntry = _b.sent(), _a)];\n\n        case 3:\n          return [2\n          /*return*/\n          , {\n            installationEntry: installationEntry,\n            registrationPromise: registrationPromise\n          }];\n      }\n    });\n  });\n}\n\nfunction updateOrCreateInstallationEntry(oldEntry) {\n  var entry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: 0\n    /* NOT_STARTED */\n\n  };\n\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: 0\n      /* NOT_STARTED */\n\n    };\n  }\n\n  return entry;\n}\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the registration\r\n * and return an InProgressInstallationEntry.\r\n */\n\n\nfunction triggerRegistrationIfNecessary(appConfig, installationEntry) {\n  if (installationEntry.registrationStatus === 0\n  /* NOT_STARTED */\n  ) {\n      if (!navigator.onLine) {\n        // Registration required but app is offline.\n        var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\"\n        /* APP_OFFLINE */\n        ));\n        return {\n          installationEntry: installationEntry,\n          registrationPromise: registrationPromiseWithError\n        };\n      } // Try registering. Change status to IN_PROGRESS.\n\n\n      var inProgressEntry = {\n        fid: installationEntry.fid,\n        registrationStatus: 1\n        /* IN_PROGRESS */\n        ,\n        registrationTime: Date.now()\n      };\n      var registrationPromise = registerInstallation(appConfig, inProgressEntry);\n      return {\n        installationEntry: inProgressEntry,\n        registrationPromise: registrationPromise\n      };\n    } else if (installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  ) {\n      return {\n        installationEntry: installationEntry,\n        registrationPromise: waitUntilFidRegistration(appConfig)\n      };\n    } else {\n    return {\n      installationEntry: installationEntry\n    };\n  }\n}\n/** This will be executed only once for each new Firebase Installation. */\n\n\nfunction registerInstallation(appConfig, installationEntry) {\n  return __awaiter(this, void 0, void 0, function () {\n    var registeredInstallationEntry, e_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 7]);\n\n          return [4\n          /*yield*/\n          , createInstallation(appConfig, installationEntry)];\n\n        case 1:\n          registeredInstallationEntry = _a.sent();\n          return [2\n          /*return*/\n          , set(appConfig, registeredInstallationEntry)];\n\n        case 2:\n          e_1 = _a.sent();\n          if (!(isServerError(e_1) && e_1.serverCode === 409)) return [3\n          /*break*/\n          , 4]; // Server returned a \"FID can not be used\" error.\n          // Generate a new ID next time.\n\n          return [4\n          /*yield*/\n          , remove(appConfig)];\n\n        case 3:\n          // Server returned a \"FID can not be used\" error.\n          // Generate a new ID next time.\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 4:\n          // Registration failed. Set FID as not registered.\n          return [4\n          /*yield*/\n          , set(appConfig, {\n            fid: installationEntry.fid,\n            registrationStatus: 0\n            /* NOT_STARTED */\n\n          })];\n\n        case 5:\n          // Registration failed. Set FID as not registered.\n          _a.sent();\n\n          _a.label = 6;\n\n        case 6:\n          throw e_1;\n\n        case 7:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/** Call if FID registration is pending. */\n\n\nfunction waitUntilFidRegistration(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var entry;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , updateInstallationRequest(appConfig)];\n\n        case 1:\n          entry = _a.sent();\n          _a.label = 2;\n\n        case 2:\n          if (!(entry.registrationStatus === 1\n          /* IN_PROGRESS */\n          )) return [3\n            /*break*/\n            , 5]; // createInstallation request still in progress.\n\n          return [4\n          /*yield*/\n          , sleep(100)];\n\n        case 3:\n          // createInstallation request still in progress.\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , updateInstallationRequest(appConfig)];\n\n        case 4:\n          entry = _a.sent();\n          return [3\n          /*break*/\n          , 2];\n\n        case 5:\n          if (entry.registrationStatus === 0\n          /* NOT_STARTED */\n          ) {\n              throw ERROR_FACTORY.create(\"create-installation-failed\"\n              /* CREATE_INSTALLATION_FAILED */\n              );\n            }\n\n          return [2\n          /*return*/\n          , entry];\n      }\n    });\n  });\n}\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateInstallationRequest(appConfig) {\n  return update(appConfig, function (oldEntry) {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(\"installation-not-found\"\n      /* INSTALLATION_NOT_FOUND */\n      );\n    }\n\n    if (hasInstallationRequestTimedOut(oldEntry)) {\n      return {\n        fid: oldEntry.fid,\n        registrationStatus: 0\n        /* NOT_STARTED */\n\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nfunction hasInstallationRequestTimedOut(installationEntry) {\n  return installationEntry.registrationStatus === 1\n  /* IN_PROGRESS */\n  && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction generateAuthToken(appConfig, installationEntry) {\n  return __awaiter(this, void 0, void 0, function () {\n    var endpoint, headers, body, request, response, responseValue, completedAuthToken;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n          headers = getHeadersWithAuth(appConfig, installationEntry);\n          body = {\n            installation: {\n              sdkVersion: PACKAGE_VERSION\n            }\n          };\n          request = {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify(body)\n          };\n          return [4\n          /*yield*/\n          , retryIfServerError(function () {\n            return fetch(endpoint, request);\n          })];\n\n        case 1:\n          response = _a.sent();\n          if (!response.ok) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , response.json()];\n\n        case 2:\n          responseValue = _a.sent();\n          completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);\n          return [2\n          /*return*/\n          , completedAuthToken];\n\n        case 3:\n          return [4\n          /*yield*/\n          , getErrorFromResponse('Generate Auth Token', response)];\n\n        case 4:\n          throw _a.sent();\n      }\n    });\n  });\n}\n\nfunction getGenerateAuthTokenEndpoint(appConfig, _a) {\n  var fid = _a.fid;\n  return getInstallationsEndpoint(appConfig) + \"/\" + fid + \"/authTokens:generate\";\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\n\n\nfunction refreshAuthToken(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var tokenPromise, entry, authToken, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , update(appConfig, function (oldEntry) {\n            if (!isEntryRegistered(oldEntry)) {\n              throw ERROR_FACTORY.create(\"not-registered\"\n              /* NOT_REGISTERED */\n              );\n            }\n\n            var oldAuthToken = oldEntry.authToken;\n\n            if (isAuthTokenValid(oldAuthToken)) {\n              // There is a valid token in the DB.\n              return oldEntry;\n            } else if (oldAuthToken.requestStatus === 1\n            /* IN_PROGRESS */\n            ) {\n                // There already is a token request in progress.\n                tokenPromise = waitUntilAuthTokenRequest(appConfig);\n                return oldEntry;\n              } else {\n              // No token or token expired.\n              if (!navigator.onLine) {\n                throw ERROR_FACTORY.create(\"app-offline\"\n                /* APP_OFFLINE */\n                );\n              }\n\n              var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n              tokenPromise = fetchAuthTokenFromServer(appConfig, inProgressEntry);\n              return inProgressEntry;\n            }\n          })];\n\n        case 1:\n          entry = _b.sent();\n          if (!tokenPromise) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , tokenPromise];\n\n        case 2:\n          _a = _b.sent();\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          _a = entry.authToken;\n          _b.label = 4;\n\n        case 4:\n          authToken = _a;\n          return [2\n          /*return*/\n          , authToken.token];\n      }\n    });\n  });\n}\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n */\n\n\nfunction waitUntilAuthTokenRequest(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var entry, authToken;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , updateAuthTokenRequest(appConfig)];\n\n        case 1:\n          entry = _a.sent();\n          _a.label = 2;\n\n        case 2:\n          if (!(entry.authToken.requestStatus === 1\n          /* IN_PROGRESS */\n          )) return [3\n            /*break*/\n            , 5]; // generateAuthToken still in progress.\n\n          return [4\n          /*yield*/\n          , sleep(100)];\n\n        case 3:\n          // generateAuthToken still in progress.\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , updateAuthTokenRequest(appConfig)];\n\n        case 4:\n          entry = _a.sent();\n          return [3\n          /*break*/\n          , 2];\n\n        case 5:\n          authToken = entry.authToken;\n\n          if (authToken.requestStatus === 0\n          /* NOT_STARTED */\n          ) {\n              throw ERROR_FACTORY.create(\"generate-token-failed\"\n              /* GENERATE_TOKEN_FAILED */\n              );\n            } else {\n            return [2\n            /*return*/\n            , authToken];\n          }\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\n\n\nfunction updateAuthTokenRequest(appConfig) {\n  return update(appConfig, function (oldEntry) {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(\"not-registered\"\n      /* NOT_REGISTERED */\n      );\n    }\n\n    var oldAuthToken = oldEntry.authToken;\n\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return __assign({}, oldEntry, {\n        authToken: {\n          requestStatus: 0\n          /* NOT_STARTED */\n\n        }\n      });\n    }\n\n    return oldEntry;\n  });\n}\n\nfunction fetchAuthTokenFromServer(appConfig, installationEntry) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 3,, 8]);\n\n          return [4\n          /*yield*/\n          , generateAuthToken(appConfig, installationEntry)];\n\n        case 1:\n          authToken = _a.sent();\n          updatedInstallationEntry = __assign({}, installationEntry, {\n            authToken: authToken\n          });\n          return [4\n          /*yield*/\n          , set(appConfig, updatedInstallationEntry)];\n\n        case 2:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , authToken];\n\n        case 3:\n          e_1 = _a.sent();\n          if (!(isServerError(e_1) && (e_1.serverCode === 401 || e_1.serverCode === 404))) return [3\n          /*break*/\n          , 5]; // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n          // Generate a new ID next time.\n\n          return [4\n          /*yield*/\n          , remove(appConfig)];\n\n        case 4:\n          // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n          // Generate a new ID next time.\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 7];\n\n        case 5:\n          updatedInstallationEntry = __assign({}, installationEntry, {\n            authToken: {\n              requestStatus: 0\n              /* NOT_STARTED */\n\n            }\n          });\n          return [4\n          /*yield*/\n          , set(appConfig, updatedInstallationEntry)];\n\n        case 6:\n          _a.sent();\n\n          _a.label = 7;\n\n        case 7:\n          throw e_1;\n\n        case 8:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction isEntryRegistered(installationEntry) {\n  return installationEntry !== undefined && installationEntry.registrationStatus === 2\n  /* COMPLETED */\n  ;\n}\n\nfunction isAuthTokenValid(authToken) {\n  return authToken.requestStatus === 2\n  /* COMPLETED */\n  && !isAuthTokenExpired(authToken);\n}\n\nfunction isAuthTokenExpired(authToken) {\n  var now = Date.now();\n  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;\n}\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\n\n\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\n  var inProgressAuthToken = {\n    requestStatus: 1\n    /* IN_PROGRESS */\n    ,\n    requestTime: Date.now()\n  };\n  return __assign({}, oldEntry, {\n    authToken: inProgressAuthToken\n  });\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken) {\n  return authToken.requestStatus === 1\n  /* IN_PROGRESS */\n  && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getId(app) {\n  return __awaiter(this, void 0, void 0, function () {\n    var appConfig, _a, installationEntry, registrationPromise;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          appConfig = extractAppConfig(app);\n          return [4\n          /*yield*/\n          , getInstallationEntry(appConfig)];\n\n        case 1:\n          _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;\n\n          if (registrationPromise) {\n            // Suppress registration errors as they are not a problem for getId.\n            registrationPromise.catch(function () {});\n          }\n\n          if (installationEntry.registrationStatus === 2\n          /* COMPLETED */\n          ) {\n              // If the installation is already registered, update the authentication\n              // token if needed. Suppress errors as they are not relevant to getId.\n              refreshAuthToken(appConfig).catch(function () {});\n            }\n\n          return [2\n          /*return*/\n          , installationEntry.fid];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getToken(app) {\n  return __awaiter(this, void 0, void 0, function () {\n    var appConfig;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          appConfig = extractAppConfig(app);\n          return [4\n          /*yield*/\n          , completeInstallationRegistration(appConfig)];\n\n        case 1:\n          _a.sent(); // At this point we either have a Registered Installation in the DB, or we've\n          // already thrown an error.\n\n\n          return [2\n          /*return*/\n          , refreshAuthToken(appConfig)];\n      }\n    });\n  });\n}\n\nfunction completeInstallationRegistration(appConfig) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, installationEntry, registrationPromise;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , getInstallationEntry(appConfig)];\n\n        case 1:\n          _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;\n          if (!registrationPromise) return [3\n          /*break*/\n          , 3]; // A createInstallation request is in progress. Wait until it finishes.\n\n          return [4\n          /*yield*/\n          , registrationPromise];\n\n        case 2:\n          // A createInstallation request is in progress. Wait until it finishes.\n          _b.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 3:\n          if (installationEntry.registrationStatus !== 2\n          /* COMPLETED */\n          ) {\n              // Installation ID can't be registered.\n              throw ERROR_FACTORY.create(\"create-installation-failed\"\n              /* CREATE_INSTALLATION_FAILED */\n              );\n            }\n\n          _b.label = 4;\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction deleteInstallation(appConfig, installationEntry) {\n  return __awaiter(this, void 0, void 0, function () {\n    var endpoint, headers, request, response;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          endpoint = getDeleteEndpoint(appConfig, installationEntry);\n          headers = getHeadersWithAuth(appConfig, installationEntry);\n          request = {\n            method: 'DELETE',\n            headers: headers\n          };\n          return [4\n          /*yield*/\n          , retryIfServerError(function () {\n            return fetch(endpoint, request);\n          })];\n\n        case 1:\n          response = _a.sent();\n          if (!!response.ok) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , getErrorFromResponse('Delete Installation', response)];\n\n        case 2:\n          throw _a.sent();\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction getDeleteEndpoint(appConfig, _a) {\n  var fid = _a.fid;\n  return getInstallationsEndpoint(appConfig) + \"/\" + fid;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction deleteInstallation$1(app) {\n  return __awaiter(this, void 0, void 0, function () {\n    var appConfig, entry;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          appConfig = extractAppConfig(app);\n          return [4\n          /*yield*/\n          , update(appConfig, function (oldEntry) {\n            if (oldEntry && oldEntry.registrationStatus === 0\n            /* NOT_STARTED */\n            ) {\n                // Delete the unregistered entry without sending a deleteInstallation request.\n                return undefined;\n              }\n\n            return oldEntry;\n          })];\n\n        case 1:\n          entry = _a.sent();\n          if (!entry) return [3\n          /*break*/\n          , 6];\n          if (!(entry.registrationStatus === 1\n          /* IN_PROGRESS */\n          )) return [3\n            /*break*/\n            , 2]; // Can't delete while trying to register.\n\n          throw ERROR_FACTORY.create(\"delete-pending-registration\"\n          /* DELETE_PENDING_REGISTRATION */\n          );\n\n        case 2:\n          if (!(entry.registrationStatus === 2\n          /* COMPLETED */\n          )) return [3\n            /*break*/\n            , 6];\n          if (!!navigator.onLine) return [3\n          /*break*/\n          , 3];\n          throw ERROR_FACTORY.create(\"app-offline\"\n          /* APP_OFFLINE */\n          );\n\n        case 3:\n          return [4\n          /*yield*/\n          , deleteInstallation(appConfig, entry)];\n\n        case 4:\n          _a.sent();\n\n          return [4\n          /*yield*/\n          , remove(appConfig)];\n\n        case 5:\n          _a.sent();\n\n          _a.label = 6;\n\n        case 6:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerInstallations(instance) {\n  var installationsName = 'installations';\n\n  var factoryMethod = function (app) {\n    // Throws if app isn't configured properly.\n    extractAppConfig(app);\n    return {\n      app: app,\n      getId: function () {\n        return getId(app);\n      },\n      getToken: function () {\n        return getToken(app);\n      },\n      delete: function () {\n        return deleteInstallation$1(app);\n      }\n    };\n  };\n\n  instance.INTERNAL.registerService(installationsName, factoryMethod);\n}\n\nregisterInstallations(firebase);\nexport { registerInstallations };","map":{"version":3,"sources":["../src/util/constants.ts","../src/util/errors.ts","../src/helpers/extract-app-config.ts","../src/api/common.ts","../src/api/create-installation.ts","../src/util/sleep.ts","../src/helpers/buffer-to-base64-url-safe.ts","../src/helpers/generate-fid.ts","../src/helpers/idb-manager.ts","../src/helpers/get-installation-entry.ts","../src/api/generate-auth-token.ts","../src/helpers/refresh-auth-token.ts","../src/functions/get-id.ts","../src/functions/get-token.ts","../src/api/delete-installation.ts","../src/functions/delete-installation.ts","../src/index.ts"],"names":["deleteInstallation","deleteInstallationRequest"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  CREATE_INSTALLATION_FAILED = 'create-installation-failed',\n  GENERATE_TOKEN_FAILED = 'generate-token-failed',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: 'Missing App configuration values.',\n  [ErrorCode.CREATE_INSTALLATION_FAILED]:\n    'Could not register Firebase Installation.',\n  [ErrorCode.GENERATE_TOKEN_FAILED]: 'Could not generate Auth Token.',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & ServerErrorData;\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { AppConfig } from '../interfaces/app-config';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES);\n  }\n\n  const appName = app.name;\n  const { projectId, apiKey, appId } = app.options;\n\n  if (!appName || !projectId || !apiKey || !appId) {\n    throw ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES);\n  }\n\n  return { appName, projectId, apiKey, appId };\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function createInstallation(\n  appConfig: AppConfig,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || ((self as unknown) as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb } from 'idb';\nimport { AppConfig } from '../interfaces/app-config';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(appConfig: AppConfig): Promise<unknown> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(value, key);\n  await tx.complete;\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<OldType, NewType>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: OldType | undefined) => NewType\n): Promise<NewType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === oldValue) {\n    return newValue;\n  }\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n\n  await tx.complete;\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.complete;\n}\n\nfunction getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallation } from '../api/create-installation';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RequestStatus,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  appConfig: AppConfig\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(\n    appConfig,\n    (oldEntry?: InstallationEntry): InstallationEntry => {\n      const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n      const entryWithPromise = triggerRegistrationIfNecessary(\n        appConfig,\n        installationEntry\n      );\n      registrationPromise = entryWithPromise.registrationPromise;\n      return entryWithPromise.installationEntry;\n    }\n  );\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the registration\n * and return an InProgressInstallationEntry.\n */\nfunction triggerRegistrationIfNecessary(\n  appConfig: AppConfig,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      appConfig,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  appConfig: AppConfig,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallation(\n      appConfig,\n      installationEntry\n    );\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending. */\nasync function waitUntilFidRegistration(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(appConfig);\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    throw ERROR_FACTORY.create(ErrorCode.CREATE_INSTALLATION_FAILED);\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(\n    appConfig,\n    (oldEntry?: InstallationEntry): InstallationEntry => {\n      if (!oldEntry) {\n        throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n      }\n\n      if (hasInstallationRequestTimedOut(oldEntry)) {\n        return {\n          fid: oldEntry.fid,\n          registrationStatus: RequestStatus.NOT_STARTED\n        };\n      }\n\n      return oldEntry;\n    }\n  );\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function generateAuthToken(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken = extractAuthTokenInfoFromResponse(\n      responseValue\n    );\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthToken } from '../api/generate-auth-token';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(appConfig: AppConfig): Promise<string> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(\n    appConfig,\n    (oldEntry?: InstallationEntry): RegisteredInstallationEntry => {\n      if (!isEntryRegistered(oldEntry)) {\n        throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n      }\n\n      const oldAuthToken = oldEntry.authToken;\n      if (isAuthTokenValid(oldAuthToken)) {\n        // There is a valid token in the DB.\n        return oldEntry;\n      } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n        // There already is a token request in progress.\n        tokenPromise = waitUntilAuthTokenRequest(appConfig);\n        return oldEntry;\n      } else {\n        // No token or token expired.\n        if (!navigator.onLine) {\n          throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n        }\n\n        const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n        tokenPromise = fetchAuthTokenFromServer(appConfig, inProgressEntry);\n        return inProgressEntry;\n      }\n    }\n  );\n\n  const authToken: CompletedAuthToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken.token;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n */\nasync function waitUntilAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    throw ERROR_FACTORY.create(ErrorCode.GENERATE_TOKEN_FAILED);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(\n    appConfig,\n    (oldEntry?: InstallationEntry): RegisteredInstallationEntry => {\n      if (!isEntryRegistered(oldEntry)) {\n        throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n      }\n\n      const oldAuthToken = oldEntry.authToken;\n      if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n        return {\n          ...oldEntry,\n          authToken: { requestStatus: RequestStatus.NOT_STARTED }\n        };\n      }\n\n      return oldEntry;\n    }\n  );\n}\n\nasync function fetchAuthTokenFromServer(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthToken(appConfig, installationEntry);\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (isServerError(e) && (e.serverCode === 401 || e.serverCode === 404)) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { extractAppConfig } from '../helpers/extract-app-config';\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { RequestStatus } from '../interfaces/installation-entry';\n\nexport async function getId(app: FirebaseApp): Promise<string> {\n  const appConfig = extractAppConfig(app);\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    appConfig\n  );\n\n  if (registrationPromise) {\n    // Suppress registration errors as they are not a problem for getId.\n    registrationPromise.catch(() => {});\n  }\n\n  if (installationEntry.registrationStatus === RequestStatus.COMPLETED) {\n    // If the installation is already registered, update the authentication\n    // token if needed. Suppress errors as they are not relevant to getId.\n    refreshAuthToken(appConfig).catch(() => {});\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { extractAppConfig } from '../helpers/extract-app-config';\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { AppConfig } from '../interfaces/app-config';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  const appConfig = extractAppConfig(app);\n\n  await completeInstallationRegistration(appConfig);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  return refreshAuthToken(appConfig);\n}\n\nasync function completeInstallationRegistration(\n  appConfig: AppConfig\n): Promise<void> {\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    appConfig\n  );\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  } else if (installationEntry.registrationStatus !== RequestStatus.COMPLETED) {\n    // Installation ID can't be registered.\n    throw ERROR_FACTORY.create(ErrorCode.CREATE_INSTALLATION_FAILED);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallation(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { deleteInstallation as deleteInstallationRequest } from '../api/delete-installation';\nimport { extractAppConfig } from '../helpers/extract-app-config';\nimport { remove, update } from '../helpers/idb-manager';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport async function deleteInstallation(app: FirebaseApp): Promise<void> {\n  const appConfig = extractAppConfig(app);\n\n  const entry = await update(appConfig, (oldEntry?: InstallationEntry):\n    | InProgressInstallationEntry\n    | RegisteredInstallationEntry\n    | undefined => {\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n    }\n    return oldEntry;\n  });\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport {\n  _FirebaseNamespace,\n  FirebaseServiceFactory\n} from '@firebase/app-types/private';\nimport { FirebaseInstallations } from '@firebase/installations-types';\n\nimport { deleteInstallation, getId, getToken } from './functions';\nimport { extractAppConfig } from './helpers/extract-app-config';\n\nexport function registerInstallations(instance: _FirebaseNamespace): void {\n  const installationsName = 'installations';\n\n  const factoryMethod: FirebaseServiceFactory = app => {\n    // Throws if app isn't configured properly.\n    extractAppConfig(app);\n\n    return {\n      app,\n      getId: () => getId(app),\n      getToken: () => getToken(app),\n      delete: () => deleteInstallation(app)\n    };\n  };\n\n  instance.INTERNAL.registerService(installationsName, factoryMethod);\n}\n\nregisterInstallations(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerInstallations`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    installations(app?: FirebaseApp): FirebaseInstallations;\n  }\n  interface FirebaseApp {\n    installations(): FirebaseInstallations;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}