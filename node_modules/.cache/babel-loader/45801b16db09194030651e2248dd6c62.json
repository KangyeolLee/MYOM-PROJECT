{"ast":null,"code":"var _jsxFileName = \"/Users/JeHongHwang/Desktop/leekang/src/components/chats/ChatLists.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { readMessage } from '../../store/actions/chatAction';\nimport './ChatLists.css';\nimport firebase from 'firebase/app';\n\nclass ChatLists extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      receiverHasRead: ''\n    };\n\n    this.newChat = () => {\n      console.log('new chat click');\n    };\n\n    this.selectChat = (index, type, chatId) => {\n      this.props.selectChatFn(index, type, chatId);\n    };\n\n    this.selectUnread = chatId => {\n      this.props.readMessage(chatId);\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          chats = _this$props.chats,\n          profile = _this$props.profile;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, chats && chats.map((chat, index) => {\n      return React.createElement(Fragment, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"each-chat col xl4 l6 m6 s12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card chatting-box white\",\n        onClick: e => {\n          const type = e.target.id;\n          this.selectChat(index, type, chat.id);\n          if (chat.messages[chat.messages.length - 1].sender !== profile.initials && !chat.receiverHasRead) this.selectUnread(chat.id);\n        },\n        selected: this.props.selectedChatIndex === index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, !chat.receiverHasRead && chat.messages[chat.messages.length - 1].sender !== profile.initials ? React.createElement(\"i\", {\n        className: \"material-icons unreadMark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"markunread\", React.createElement(\"span\", {\n        className: \"guide-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"\\uC0C8 \\uBA54\\uC2DC\\uC9C0 \\uB3C4\\uCC29!\")) : null, React.createElement(\"div\", {\n        className: \"card-content black-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"card-title one-chat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, chat[profile.email] === '/img/defaults/userProfile.jpeg' ? React.createElement(\"img\", {\n        src: \"/img/defaults/userProfile.jpeg\",\n        width: \"60px\",\n        height: \"60px\",\n        className: \"circle\",\n        alt: \"\\uC0C1\\uB300\\uBC29 \\uD504\\uB85C\\uD544 \\uC774\\uBBF8\\uC9C0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }) : React.createElement(\"img\", {\n        src: \"/img/defaults/lazy-loading.png\",\n        \"data-src\": firebase.storage().refFromURL(chat[profile.email]).getDownloadURL().then(url => {\n          const chatProfiles = document.getElementById('profile-in-chat' + index);\n          chatProfiles.src = url;\n        }),\n        width: \"60px\",\n        height: \"60px\",\n        id: 'profile-in-chat' + index,\n        className: \"circle\",\n        alt: \"\\uC0C1\\uB300\\uBC29 \\uD504\\uB85C\\uD544 \\uC774\\uBBF8\\uC9C0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"userNickname scorelt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, chat.users_nickName.filter(_user => _user !== profile.initials))), React.createElement(\"div\", {\n        className: \"chatlist-message\",\n        id: this.props.chat_type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, chat.messages[chat.messages.length - 1].message ? chat.messages[chat.messages.length - 1].message : '파일을 보냈습니다 : ' + chat.messages[chat.messages.length - 1].fileName)))));\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    readMessage: chatId => dispatch(readMessage(chatId))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(ChatLists);","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/src/components/chats/ChatLists.js"],"names":["React","Component","Fragment","connect","readMessage","firebase","ChatLists","state","receiverHasRead","newChat","console","log","selectChat","index","type","chatId","props","selectChatFn","selectUnread","render","chats","profile","map","chat","e","target","id","messages","length","sender","initials","selectedChatIndex","email","storage","refFromURL","getDownloadURL","then","url","chatProfiles","document","getElementById","src","users_nickName","filter","_user","chat_type","message","fileName","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux'\nimport { readMessage } from '../../store/actions/chatAction'\nimport './ChatLists.css'\nimport firebase from 'firebase/app';\n\nclass ChatLists extends Component {\n\tstate = {\n\t\treceiverHasRead: ''\n  }\n  // componentDidUpdate(prevState, prevProps) {\n  //   if(prevProps !== this.props) {\n  //     const chattingBox = [...document.querySelectorAll('.chatting-box')];\n  //     const newMessages = chattingBox.filter(box => box.firstChild.classList.contains('unreadMark'));\n  //     newMessages.map(message => message.setAttribute('style', 'background-color: yellow !important'))\n  //   }\n  // }\n\tnewChat = () => {\n\t\tconsole.log('new chat click');\n\t}\n\tselectChat = (index, type, chatId) => {\n\t\tthis.props.selectChatFn(index, type, chatId);\n\t}\n\tselectUnread = (chatId) => {\n\t\tthis.props.readMessage(chatId);\n\t}\n\trender(){\n    const { chats, profile } = this.props;\n\t\n\t\treturn(\n\t\t\t<Fragment>\n\t\t\t\t{ chats && chats.map((chat, index) => {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<Fragment key={index}>\n\t\t\t\t\t\t\t<div className=\"each-chat col xl4 l6 m6 s12\">\n\t\t\t\t\t\t\t\t<div className=\"card chatting-box white\" onClick = {(e) => {\n\t\t\t\t\t\t\t\t\tconst type = e.target.id;\n\t\t\t\t\t\t\t\t\tthis.selectChat(index, type, chat.id); \n\t\t\t\t\t\t\t\t\tif(chat.messages[chat.messages.length-1].sender !== profile.initials && !chat.receiverHasRead) this.selectUnread(chat.id);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tselected={this.props.selectedChatIndex === index}>\n\n                  {\t\n                    (!chat.receiverHasRead && chat.messages[chat.messages.length-1].sender !== profile.initials) \n                      ? <i className=\"material-icons unreadMark\">markunread<span className='guide-text'>새 메시지 도착!</span></i>\n\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t<div className=\"card-content black-text\">\n\t\t\t\t\t\t\t\t\t\t<span className=\"card-title one-chat\">\n                      { \n                        (chat[profile.email] === '/img/defaults/userProfile.jpeg')\n                          ? <img src=\"/img/defaults/userProfile.jpeg\" width='60px' height='60px' className='circle' alt=\"상대방 프로필 이미지\"/>\n                          : <img src=\"/img/defaults/lazy-loading.png\" data-src={firebase.storage().refFromURL(chat[profile.email]).getDownloadURL().then(url => {\n                            const chatProfiles = document.getElementById('profile-in-chat' + index);\n                            chatProfiles.src = url;\n                          })} width='60px' height='60px' id={'profile-in-chat' + index} className='circle' alt=\"상대방 프로필 이미지\"/>\n                      }\n\t\t\t\t\t\t\t\t\t\t\t{/* <img src={chat[profile.email] === '/img/defaults/userProfile.jpeg' ? '/img/defaults/userProfile.jpeg' : firebase.storage().refFromURL(chat[profile.email]).getDownloadURL().then(url => {\n                        const chatProfiles = document.getElementById('profile-in-chat' + index);\n                        chatProfiles.src = url;\n                      })} width='60px' height='60px' id={'profile-in-chat' + index} className='circle' alt=\"상대방 프로필 이미지\"/> */}\n\t\t\t\t\t\t\t\t\t\t\t<div className='userNickname scorelt'>{chat.users_nickName.filter(_user => _user !== profile.initials)}</div>\n\t\t\t\t\t\t\t\t\t\t\t{/* {chat.users.filter(_user => _user !== profile.email)[0].split('')[0]} */}\n\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t<div className=\"chatlist-message\" id={this.props.chat_type}>{chat.messages[chat.messages.length -1].message ? chat.messages[chat.messages.length -1].message : '파일을 보냈습니다 : ' + chat.messages[chat.messages.length -1].fileName}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\treadMessage: (chatId) => dispatch(readMessage(chatId))\n\t}\n}\nexport default connect(null, mapDispatchToProps)(ChatLists);\n"]},"metadata":{},"sourceType":"module"}