{"ast":null,"code":"import { EditorState, SelectionState } from 'draft-js';\nimport getSelectedBlocks from './getSelectedBlocks';\n/**\n * Calls a provided `modifier` function with a selection for each\n * selected block in the current editor selection. Passes through additional\n * arguments to the modifier.\n *\n * Note: At the moment it will retain the original selection and override\n * possible selection changes from modifiers\n *\n * @param  {object} editorState The current draft.js editor state object\n *\n * @param  {function} modifier  A modifier function to be executed.\n *                              Must have the signature (editorState, selection, ...)\n *\n * @param  {mixed} ...args      Additional arguments to be passed through to the modifier\n *\n * @return {object} The new editor state\n */\n\nexport default (function (editorState, modifier) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  var contentState = editorState.getCurrentContent();\n  var currentSelection = editorState.getSelection();\n  var startKey = currentSelection.getStartKey();\n  var endKey = currentSelection.getEndKey();\n  var startOffset = currentSelection.getStartOffset();\n  var endOffset = currentSelection.getEndOffset();\n  var isSameBlock = startKey === endKey;\n  var selectedBlocks = getSelectedBlocks(contentState, startKey, endKey);\n  var finalEditorState = editorState;\n  selectedBlocks.forEach(function (block) {\n    var currentBlockKey = block.getKey();\n    var selectionStart = startOffset;\n    var selectionEnd = endOffset;\n\n    if (currentBlockKey === startKey) {\n      selectionStart = startOffset;\n      selectionEnd = isSameBlock ? endOffset : block.getText().length;\n    } else if (currentBlockKey === endKey) {\n      selectionStart = isSameBlock ? startOffset : 0;\n      selectionEnd = endOffset;\n    } else {\n      selectionStart = 0;\n      selectionEnd = block.getText().length;\n    }\n\n    var selection = new SelectionState({\n      anchorKey: currentBlockKey,\n      anchorOffset: selectionStart,\n      focusKey: currentBlockKey,\n      focusOffset: selectionEnd\n    });\n    finalEditorState = modifier.apply(void 0, [finalEditorState, selection].concat(args));\n  });\n  return EditorState.forceSelection(finalEditorState, currentSelection);\n});","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/node_modules/draft-js-utils/esm/callModifierForSelectedBlocks.js"],"names":["EditorState","SelectionState","getSelectedBlocks","editorState","modifier","_len","arguments","length","args","Array","_key","contentState","getCurrentContent","currentSelection","getSelection","startKey","getStartKey","endKey","getEndKey","startOffset","getStartOffset","endOffset","getEndOffset","isSameBlock","selectedBlocks","finalEditorState","forEach","block","currentBlockKey","getKey","selectionStart","selectionEnd","getText","selection","anchorKey","anchorOffset","focusKey","focusOffset","apply","concat","forceSelection"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,UAA5C;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA;;;;;;;;;;;;;;;;;;AAkBA,gBAAgB,UAAUC,WAAV,EAAuBC,QAAvB,EAAiC;AAC/C,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAApC,EAAwEK,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGL,IAA9F,EAAoGK,IAAI,EAAxG,EAA4G;AAC1GF,IAAAA,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBJ,SAAS,CAACI,IAAD,CAA1B;AACD;;AAED,MAAIC,YAAY,GAAGR,WAAW,CAACS,iBAAZ,EAAnB;AACA,MAAIC,gBAAgB,GAAGV,WAAW,CAACW,YAAZ,EAAvB;AACA,MAAIC,QAAQ,GAAGF,gBAAgB,CAACG,WAAjB,EAAf;AACA,MAAIC,MAAM,GAAGJ,gBAAgB,CAACK,SAAjB,EAAb;AACA,MAAIC,WAAW,GAAGN,gBAAgB,CAACO,cAAjB,EAAlB;AACA,MAAIC,SAAS,GAAGR,gBAAgB,CAACS,YAAjB,EAAhB;AACA,MAAIC,WAAW,GAAGR,QAAQ,KAAKE,MAA/B;AACA,MAAIO,cAAc,GAAGtB,iBAAiB,CAACS,YAAD,EAAeI,QAAf,EAAyBE,MAAzB,CAAtC;AACA,MAAIQ,gBAAgB,GAAGtB,WAAvB;AACAqB,EAAAA,cAAc,CAACE,OAAf,CAAuB,UAAUC,KAAV,EAAiB;AACtC,QAAIC,eAAe,GAAGD,KAAK,CAACE,MAAN,EAAtB;AACA,QAAIC,cAAc,GAAGX,WAArB;AACA,QAAIY,YAAY,GAAGV,SAAnB;;AAEA,QAAIO,eAAe,KAAKb,QAAxB,EAAkC;AAChCe,MAAAA,cAAc,GAAGX,WAAjB;AACAY,MAAAA,YAAY,GAAGR,WAAW,GAAGF,SAAH,GAAeM,KAAK,CAACK,OAAN,GAAgBzB,MAAzD;AACD,KAHD,MAGO,IAAIqB,eAAe,KAAKX,MAAxB,EAAgC;AACrCa,MAAAA,cAAc,GAAGP,WAAW,GAAGJ,WAAH,GAAiB,CAA7C;AACAY,MAAAA,YAAY,GAAGV,SAAf;AACD,KAHM,MAGA;AACLS,MAAAA,cAAc,GAAG,CAAjB;AACAC,MAAAA,YAAY,GAAGJ,KAAK,CAACK,OAAN,GAAgBzB,MAA/B;AACD;;AAED,QAAI0B,SAAS,GAAG,IAAIhC,cAAJ,CAAmB;AACjCiC,MAAAA,SAAS,EAAEN,eADsB;AAEjCO,MAAAA,YAAY,EAAEL,cAFmB;AAGjCM,MAAAA,QAAQ,EAAER,eAHuB;AAIjCS,MAAAA,WAAW,EAAEN;AAJoB,KAAnB,CAAhB;AAMAN,IAAAA,gBAAgB,GAAGrB,QAAQ,CAACkC,KAAT,CAAe,KAAK,CAApB,EAAuB,CAACb,gBAAD,EAAmBQ,SAAnB,EAA8BM,MAA9B,CAAqC/B,IAArC,CAAvB,CAAnB;AACD,GAvBD;AAwBA,SAAOR,WAAW,CAACwC,cAAZ,CAA2Bf,gBAA3B,EAA6CZ,gBAA7C,CAAP;AACD,CAvCD","sourcesContent":["import { EditorState, SelectionState } from 'draft-js';\nimport getSelectedBlocks from './getSelectedBlocks';\n/**\n * Calls a provided `modifier` function with a selection for each\n * selected block in the current editor selection. Passes through additional\n * arguments to the modifier.\n *\n * Note: At the moment it will retain the original selection and override\n * possible selection changes from modifiers\n *\n * @param  {object} editorState The current draft.js editor state object\n *\n * @param  {function} modifier  A modifier function to be executed.\n *                              Must have the signature (editorState, selection, ...)\n *\n * @param  {mixed} ...args      Additional arguments to be passed through to the modifier\n *\n * @return {object} The new editor state\n */\n\nexport default (function (editorState, modifier) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  var contentState = editorState.getCurrentContent();\n  var currentSelection = editorState.getSelection();\n  var startKey = currentSelection.getStartKey();\n  var endKey = currentSelection.getEndKey();\n  var startOffset = currentSelection.getStartOffset();\n  var endOffset = currentSelection.getEndOffset();\n  var isSameBlock = startKey === endKey;\n  var selectedBlocks = getSelectedBlocks(contentState, startKey, endKey);\n  var finalEditorState = editorState;\n  selectedBlocks.forEach(function (block) {\n    var currentBlockKey = block.getKey();\n    var selectionStart = startOffset;\n    var selectionEnd = endOffset;\n\n    if (currentBlockKey === startKey) {\n      selectionStart = startOffset;\n      selectionEnd = isSameBlock ? endOffset : block.getText().length;\n    } else if (currentBlockKey === endKey) {\n      selectionStart = isSameBlock ? startOffset : 0;\n      selectionEnd = endOffset;\n    } else {\n      selectionStart = 0;\n      selectionEnd = block.getText().length;\n    }\n\n    var selection = new SelectionState({\n      anchorKey: currentBlockKey,\n      anchorOffset: selectionStart,\n      focusKey: currentBlockKey,\n      focusOffset: selectionEnd\n    });\n    finalEditorState = modifier.apply(void 0, [finalEditorState, selection].concat(args));\n  });\n  return EditorState.forceSelection(finalEditorState, currentSelection);\n});"]},"metadata":{},"sourceType":"module"}