{"ast":null,"code":"import firebase from 'firebase/app';\nexport const createPost = (postData, category, history) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    //make async call to databasae\n    const firestore = getFirestore();\n    const profile = getState().firebase.profile;\n    const authorId = getState().firebase.auth.uid;\n    let docRef = firestore.collection('posts').doc();\n    let storageRef = firebase.storage().ref('images/posts/' + docRef.id).child(postData.post_img.name);\n    storageRef.put(postData.post_img).then(() => {\n      storageRef.getDownloadURL().then(url => {\n        //posts collection's document\n        docRef.set({\n          title: postData.title,\n          content: postData.content,\n          category: category,\n          post_img: url,\n          author: profile.initials,\n          author_profileImg: profile.profileImgURL,\n          authorId: authorId,\n          createAt: new Date(),\n          comments: [] // comments: firebase.firestore.FieldValue.arrayUnion({\n          // \tcomment: '',\n          // \twriter: '',\n          // })\n\n        }).then(() => {\n          dispatch({\n            type: 'CREATE_POST',\n            postData\n          });\n          history.push('/community/' + category);\n        }).catch(err => {\n          dispatch({\n            type: 'CREATE_POST_ERROR',\n            err\n          });\n        });\n      });\n    });\n  };\n};\nexport const postUpdate = (postData, category, history) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    let docRef = firestore.collection('posts').doc(postData.post_id);\n    let storageRef = firebase.storage().ref('images/posts/' + docRef.id);\n    docRef.get().then(doc => {\n      const fromURL = doc.data().post_img;\n      const httpsRef = firebase.storage().refFromURL(fromURL);\n      httpsRef.delete().then(() => {\n        storageRef.child(postData.post_img.name).put(postData.post_img).then(() => {\n          storageRef.child(postData.post_img.name).getDownloadURL().then(url => {\n            docRef.update({\n              title: postData.title,\n              content: postData.content,\n              post_img: url\n            });\n          });\n        });\n      }).then(() => {\n        dispatch({\n          type: 'UPDATE_POST_SUCCESS',\n          postData\n        });\n        history.push('/post/' + postData.post_id);\n      }).catch(err => {\n        dispatch({\n          type: 'UPDATE_POST_ERROR',\n          err\n        });\n      });\n    });\n  };\n};\nexport const commentRegister = (docID, commentData) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const profile = getState().firebase.profile;\n    firestore.collection('posts').doc(docID).update({\n      comments: firebase.firestore.FieldValue.arrayUnion({\n        comment: commentData.comment,\n        likes: 0,\n        userID: profile.initials,\n        userProfile: profile.profileImgURL,\n        uid: userAuth.uid,\n        timestamp: new Date()\n      })\n    }).then(() => {\n      dispatch({\n        type: 'CREATE_COMMENTS_SUCCESS',\n        commentData\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'CREATE_COMMENTS_ERROR'\n      }, err);\n    });\n  };\n};\nexport const postDelete = (docID, history) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    let docRef = firestore.collection('posts').doc(docID);\n    docRef.delete().then(() => {\n      dispatch({\n        type: 'DELETE_POST_SUCCESS'\n      });\n      history.push('/community/admin');\n    }).catch(err => {\n      dispatch({\n        type: 'DELETE_POST_ERROR'\n      });\n    });\n  };\n};\nexport const _delete_comment = (post_id, commentData) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const docRef = firestore.collection('posts').doc(post_id);\n    docRef.update({\n      comments: firebase.firestore.FieldValue.arrayRemove(commentData)\n    }).then(() => {\n      dispatch({\n        type: 'DELETE_COMMENT_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'DELETE_COMMENT_ERROR'\n      });\n    });\n  };\n};\nexport const _update_comment = (post_id, comment_id, updating_data) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const docRef = firestore.collection('posts').doc(post_id); // docRef.update({\n    // \tcomments: firebase.firestore.FieldValue.arrayUnion({\n    // \t\tcomment: updating_data\n    // \t})\n    // })\n    // .then(() => {\n    // \tdispatch({type: 'UPDATE_COMMENT_SUCCESS'});\n    // })\n    // .catch((err) => {\n    // \tdispatch({type: 'UPDATE_COMMENT_ERROR', err});\n    // }) \n\n    firestore.runTransaction(transaction => {\n      return transaction.get(docRef).then(doc => {\n        const commentHistory = doc.data().comments;\n        const one = commentHistory[comment_id];\n        one.comment = updating_data;\n        transaction.update(docRef, {\n          comments: commentHistory\n        });\n      });\n    }).then(() => {\n      dispatch({\n        type: 'UPDATE_COMMENT_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'UPDATE_COMMENT_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const _report_badUser = () => {\n  return dispatch => {\n    dispatch({\n      type: 'REPORT_BADUSER_SUCCESS'\n    });\n  };\n};","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/src/store/actions/postAction.js"],"names":["firebase","createPost","postData","category","history","dispatch","getState","getFirestore","firestore","profile","authorId","auth","uid","docRef","collection","doc","storageRef","storage","ref","id","child","post_img","name","put","then","getDownloadURL","url","set","title","content","author","initials","author_profileImg","profileImgURL","createAt","Date","comments","type","push","catch","err","postUpdate","post_id","get","fromURL","data","httpsRef","refFromURL","delete","update","commentRegister","docID","commentData","userAuth","FieldValue","arrayUnion","comment","likes","userID","userProfile","timestamp","postDelete","_delete_comment","arrayRemove","_update_comment","comment_id","updating_data","runTransaction","transaction","commentHistory","one","_report_badUser"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\n\n\nexport const createPost = (postData, category, history) => {\n\treturn(dispatch, getState, { getFirestore }) => {\n\t\t//make async call to databasae\n\t\tconst firestore = getFirestore();\n\t\tconst profile = getState().firebase.profile;\n\t\tconst authorId = getState().firebase.auth.uid;\n\t\tlet docRef = firestore.collection('posts').doc();\n\t\tlet storageRef = firebase.storage().ref('images/posts/' + docRef.id).child(postData.post_img.name);\n\t\tstorageRef.put(postData.post_img)\n\t\t.then(() => {\n\t\t\tstorageRef.getDownloadURL()\n\t\t\t.then((url) => {\n\t\t\t//posts collection's document\n\t\t\t\tdocRef.set({\n\t\t\t\t\ttitle: postData.title,\n\t\t\t\t\tcontent: postData.content,\n\t\t\t\t\tcategory: category,\n\t\t\t\t\tpost_img: url,\n\t\t\t\t\tauthor: profile.initials,\n\t\t\t\t\tauthor_profileImg: profile.profileImgURL,\n\t\t\t\t\tauthorId: authorId,\n\t\t\t\t\tcreateAt: new Date(),\n\t\t\t\t\tcomments: [],\n\t\t\t\t\t// comments: firebase.firestore.FieldValue.arrayUnion({\n\t\t\t\t\t// \tcomment: '',\n\t\t\t\t\t// \twriter: '',\n\t\t\t\t\t// })\n\t\t\t\t}).then(() => {\n\t\t\t\t\tdispatch({type: 'CREATE_POST', postData});\n\t\t\t\t\thistory.push('/community/'+category);\n\t\t\t\t}).catch((err) => {\n\t\t\t\t\tdispatch({type: 'CREATE_POST_ERROR', err})\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n}\n\nexport const postUpdate = (postData, category, history) => {\n\treturn(dispatch, getState, { getFirestore }) => {\n\t\tconst firestore = getFirestore();\n\t\tlet docRef = firestore.collection('posts').doc(postData.post_id);\n\t\tlet storageRef = firebase.storage().ref('images/posts/' + docRef.id);\n\n\t\tdocRef.get().then((doc) => {\n\t\t\tconst fromURL = doc.data().post_img;\n\t\t\tconst httpsRef = firebase.storage().refFromURL(fromURL);\n\n\t\t\thttpsRef.delete()\n\t\t\t\t.then(() => {\n\t\t\t\t\tstorageRef.child(postData.post_img.name).put(postData.post_img)\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tstorageRef.child(postData.post_img.name).getDownloadURL()\n\t\t\t\t\t\t\t.then((url) => {\n\t\t\t\t\t\t\t\tdocRef.update({\n\t\t\t\t\t\t\t\t\ttitle: postData.title,\n\t\t\t\t\t\t\t\t\tcontent: postData.content,\n\t\t\t\t\t\t\t\t\tpost_img: url,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}).then(()=> {\n\t\t\t\t\tdispatch({type: 'UPDATE_POST_SUCCESS', postData});\n\t\t\t\t\thistory.push('/post/' + postData.post_id);\n\t\t\t\t}).catch((err) => {\n\t\t\t\t\tdispatch({type: 'UPDATE_POST_ERROR', err})\n\t\t\t\t})\n\t\t})\n\t}\n}\n\nexport const commentRegister = (docID, commentData) => {\n\treturn(dispatch, getState, { getFirestore }) => {\n\t\tconst firestore = getFirestore();\n\t\tconst userAuth = getState().firebase.auth;\n\t\tconst profile = getState().firebase.profile;\n\t\tfirestore.collection('posts').doc(docID).update({\n\t\t\t\tcomments: firebase.firestore.FieldValue.arrayUnion({\n\t\t\t\tcomment: commentData.comment,\n\t\t\t\tlikes: 0,\n\t\t\t\tuserID: profile.initials,\n\t\t\t\tuserProfile: profile.profileImgURL,\n\t\t\t\tuid: userAuth.uid,\n\t\t\t\ttimestamp: new Date(),\n\t\t\t})\n\t\t}).then(() => {\n\t\t\tdispatch({type: 'CREATE_COMMENTS_SUCCESS', commentData})\n\t\t}).catch((err) => {\n\t\t\tdispatch({type: 'CREATE_COMMENTS_ERROR'}, err)\n\t\t})\n\t}\n}\n\nexport const postDelete = (docID, history) => {\n\treturn (dispatch, getState, { getFirestore }) => {\n\t\tconst firestore = getFirestore();\n\t\tlet docRef = firestore.collection('posts').doc(docID);\n\t\tdocRef.delete()\n\t\t.then(() => {\n\t\t\tdispatch({type: 'DELETE_POST_SUCCESS'});\n\t\t\thistory.push('/community/admin')\n\t\t}).catch((err) => {\n\t\t\tdispatch({type: 'DELETE_POST_ERROR'});\n\t\t})\n\n\t}\n}\n\nexport const _delete_comment = (post_id, commentData) => {\n\treturn (dispatch, getState, { getFirestore }) => {\n\t\tconst firestore = getFirestore();\n\t\tconst docRef = firestore.collection('posts').doc(post_id);\n\t\t\tdocRef.update({\n\t\t\t\tcomments: firebase.firestore.FieldValue.arrayRemove(commentData)\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tdispatch({type: 'DELETE_COMMENT_SUCCESS'});\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tdispatch({type: 'DELETE_COMMENT_ERROR'});\n\t\t})\n\t}\n}\n\nexport const _update_comment = (post_id, comment_id, updating_data) => {\n\treturn (dispatch, getState, {getFirestore}) => {\n\t\tconst firestore = getFirestore();\n\t\tconst docRef = firestore.collection('posts').doc(post_id);\n\t\t// docRef.update({\n\t\t// \tcomments: firebase.firestore.FieldValue.arrayUnion({\n\t\t// \t\tcomment: updating_data\n\t\t// \t})\n\t\t// })\n\t\t// .then(() => {\n\t\t// \tdispatch({type: 'UPDATE_COMMENT_SUCCESS'});\n\t\t// })\n\t\t// .catch((err) => {\n\t\t// \tdispatch({type: 'UPDATE_COMMENT_ERROR', err});\n\t\t// }) \n\t\tfirestore.runTransaction(transaction => {\n\t\t\treturn transaction.get(docRef).then(doc => {\n\t\t\t\tconst commentHistory = doc.data().comments;\n\t\t\t\tconst one = commentHistory[comment_id];\n\t\t\t\tone.comment = updating_data\n\t\t\t\ttransaction.update(docRef, { comments: commentHistory})\n\t\t\t})\n\t\t})\n\t\t.then(() => {\n\t\t\tdispatch({type: 'UPDATE_COMMENT_SUCCESS'});\n\t\t})\n\t\t.catch((err) => {\n\t\t\tdispatch({type: 'UPDATE_COMMENT_ERROR', err});\n\t\t})\n\t}\n}\n\nexport const _report_badUser = () => {\n  return (dispatch) => {\n    dispatch({type: 'REPORT_BADUSER_SUCCESS'})\n  }\n}"]},"metadata":{},"sourceType":"module"}