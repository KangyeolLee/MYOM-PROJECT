{"ast":null,"code":"import firebase from 'firebase/app';\nexport const createService = (serviceData, history) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const userProfile = getState().firebase.profile;\n    const userRef = firestore.collection('users').doc(userAuth.uid);\n    const docRef = firestore.collection('testService').doc();\n    const storageRef = firebase.storage().ref('images/testService/' + docRef.id);\n    let batch = firestore.batch();\n    let basic_chips = serviceData.basic_chips ? serviceData.basic_chips : [];\n    let pro_chips = serviceData.pro_chips ? serviceData.pro_chips : [];\n    let videos = [];\n    let fileArray = [];\n    serviceData.images.forEach(item => Object.values(item).forEach(file => {\n      if (file instanceof File) fileArray = [...fileArray, file];\n    }));\n    serviceData.videos.forEach(item => Object.values(item).forEach(file => {\n      if (file instanceof File) fileArray = [...fileArray, file];\n    }));\n\n    const numberWithCommas = x => {\n      return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    };\n\n    async function uploadTaskPromise(name, item) {\n      return new Promise(function (resolve, reject) {\n        const uploadTask = storageRef.child(name).put(item);\n        uploadTask.on('state_changed', function (snapshot) {\n          let progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n          let loader = document.querySelector('#hidden-for-loading');\n          let determinate = document.querySelector('#hidden-for-loading .progress .determinate');\n          loader.style.display = 'block';\n          determinate.style.width = progress + '%';\n        }, function (err) {\n          switch (err.code) {\n            case 'storage/unauthorized':\n              console.log('no authorization');\n              break;\n\n            case 'storage/canceled':\n              console.log('canceled');\n              break;\n\n            case 'storage/unknown':\n              console.log('unknown error');\n              break;\n          }\n        }, function complete() {\n          console.log('done');\n          uploadTask.snapshot.ref.getDownloadURL().then(url => resolve(url));\n        });\n      });\n    }\n\n    const putStoageItem = async (item, index) => {\n      let type = item.type;\n      let name;\n\n      if (type.split('/').shift() === 'image') {\n        if (index === 0) name = 'thumbnail';else name = 'details' + index;\n      } else name = 'video' + index;\n\n      let url = await uploadTaskPromise(name, item);\n\n      if (type.split('/').shift() === 'image') {\n        batch.set(docRef, {\n          images: {\n            [name]: url\n          }\n        }, {\n          merge: true\n        });\n      } else {\n        videos.push(url);\n      }\n    }; //   return storageRef.child(name).put(item)\n    //   .then((snapshot) => { return snapshot.ref.getDownloadURL() })\n    //   .then((url) => { \n    //     console.log('one success!')\n    //     if(type.split('/').shift() === 'image') {\n    //       batch.set(docRef, { images: \n    //         {\n    //           [name]: url,\n    //         }\n    //       }, {merge: true});\n    //     } else {\n    //       videos.push(url);\n    //     }\n    //   })\n    //   .catch((err) => console.log('one failed', err.message))\n    // }\n\n\n    Promise.all(fileArray.map(async (item, index) => {\n      await putStoageItem(item, index);\n    })).then(() => {\n      if (serviceData.priority2) {\n        batch.set(docRef, {\n          [serviceData.priority2]: 3\n        }, {\n          merge: true\n        });\n      }\n\n      if (serviceData.priority3) {\n        batch.set(docRef, {\n          [serviceData.priority3]: 1\n        }, {\n          merge: true\n        });\n      }\n\n      batch.update(userRef, {\n        hasOwnService: true,\n        ownServiceId: docRef.id\n      });\n      batch.set(docRef, {\n        [serviceData.priority1]: 5,\n        price: [{\n          type: 'BASIC',\n          price: numberWithCommas(serviceData.basic_price * 10000),\n          intro: serviceData.basic_intro,\n          working: serviceData.basic_working,\n          modify: serviceData.basic_modify,\n          chips: ['자막', '음악', '컷편집', ...basic_chips],\n          runningTime: serviceData.basic_runningTime,\n          additional_price: serviceData.basic_additional_runningTime\n        }, {\n          type: 'PRO',\n          price: numberWithCommas(serviceData.pro_price * 10000),\n          intro: serviceData.pro_intro,\n          working: serviceData.pro_working,\n          modify: serviceData.pro_modify,\n          chips: ['자막', '음악', '컷편집', '기본 색보정', ...pro_chips],\n          runningTime: serviceData.pro_runningTime,\n          additional_price: serviceData.pro_additional_runningTime\n        }],\n        service_title: serviceData.service_title,\n        service_content: serviceData.service_content,\n        service_refund: serviceData.service_refund,\n        videos: videos,\n        provider_id: userAuth.uid,\n        provider_email: userAuth.email,\n        provider_nickName: userProfile.initials,\n        providerImg: userProfile.profileImgURL,\n        timestamp: new Date(),\n        personal_feeling: serviceData.personal_feeling ? serviceData.personal_feeling : '',\n        reviewCount: 0\n      }, {\n        merge: true\n      });\n      batch.commit();\n    }).then(() => {\n      history.push('/mypageProvider/serviceSetting');\n      dispatch({\n        type: 'CREATE_SERVICE_SUCESS'\n      });\n    }).catch(err => {\n      console.log('failed', err.message);\n      dispatch({\n        type: 'CREATE_SERVICE_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const serviceContentUpdate = (service_id, serviceData, target_id) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const docRef = firestore.collection('testService').doc(service_id);\n    docRef.update({\n      [target_id]: serviceData\n    }).then(() => {\n      console.log('updated success!');\n      dispatch({\n        type: 'TITLE_UPDATE_SUCCESS'\n      });\n    }).catch(err => {\n      console.log('error!', err);\n      dispatch({\n        type: 'TITLE_UPDATE_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const serviceImgUpdate = (service_id, serviceImgs) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const docRef = firestore.collection('testService').doc(service_id);\n    const storageRef = firebase.storage().ref('images/testService/' + service_id);\n    const batch = firestore.batch();\n    const imgs = Object.entries(serviceImgs).filter(img => img[0].includes('file')).map(name => ({\n      [name[0].split('_').shift()]: name[1]\n    }));\n\n    async function uploadTaskPromise(name, item) {\n      return new Promise(function (resolve, reject) {\n        const uploadTask = storageRef.child(name).put(item);\n        uploadTask.on('state_changed', function (snapshot) {\n          let progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n          let loader = document.querySelector('#hidden-for-loading');\n          let determinate = document.querySelector('#hidden-for-loading .progress .determinate');\n          loader.style.display = 'block';\n          determinate.style.width = progress + '%';\n        }, function (err) {\n          switch (err.code) {\n            case 'storage/unauthorized':\n              console.log('no authorization');\n              break;\n\n            case 'storage/canceled':\n              console.log('canceled');\n              break;\n\n            case 'storage/unknown':\n              console.log('unknown error');\n              break;\n          }\n        }, function complete() {\n          uploadTask.snapshot.ref.getDownloadURL().then(url => resolve(url));\n        });\n      });\n    }\n\n    const putStoageItem = async item => {\n      let name = Object.keys(item)[0];\n      let file = Object.values(item)[0] ? Object.values(item)[0] : null;\n\n      if (file === null) {\n        return batch.set(docRef, {\n          images: {\n            [name]: ''\n          }\n        }, {\n          merge: true\n        });\n      }\n\n      try {\n        const url = await uploadTaskPromise(name, file);\n        console.log('one success!');\n        batch.set(docRef, {\n          images: {\n            [name]: url\n          }\n        }, {\n          merge: true\n        });\n      } catch (err) {\n        console.log('one failes', err.message);\n      } // return storageRef.child(name).put(file)\n      // .then((snapshot) => { return snapshot.ref.getDownloadURL() })\n      // .then((url) => { \n      //   console.log('one success!') \n      //   batch.set(docRef, { images: \n      //     {\n      //       [name]: url,\n      //     }\n      //   }, {merge: true});\n      // })\n      // .catch((err) => console.log('one failed', err.message))\n\n    };\n\n    Promise.all(imgs.map(async item => {\n      await putStoageItem(item);\n    })).then(() => {\n      batch.commit();\n      const loader = document.querySelector('#hidden-for-loading');\n      loader.style.display = 'none';\n      console.log('all uploaded');\n    }).then(() => {\n      dispatch({\n        type: 'IMAGE_UPDATE_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'IMAGE_UPDATE_ERROR',\n        err\n      });\n      console.log('err', err);\n    });\n  };\n};\nexport const serviceVideoUpdate = (service_id, serviceVideos) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    let videoFiles = [];\n    const firestore = getFirestore();\n    const docRef = firestore.collection('testService').doc(service_id);\n    const storageRef = firebase.storage().ref('images/testService/' + service_id);\n    const batch = firestore.batch();\n    const videos = Object.entries(serviceVideos).filter(video => video[0].includes('file')).map(name => ({\n      [name[0].split('_').shift()]: name[1]\n    }));\n\n    async function uploadTaskPromise(name, item) {\n      return new Promise(function (resolve, reject) {\n        const uploadTask = storageRef.child(name).put(item);\n        uploadTask.on('state_changed', function (snapshot) {\n          let progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n          let loader = document.querySelector('#hidden-for-loading');\n          let determinate = document.querySelector('#hidden-for-loading .progress .determinate');\n          loader.style.display = 'block';\n          determinate.style.width = progress + '%';\n        }, function (err) {\n          switch (err.code) {\n            case 'storage/unauthorized':\n              console.log('no authorization');\n              break;\n\n            case 'storage/canceled':\n              console.log('canceled');\n              break;\n\n            case 'storage/unknown':\n              console.log('unknown error');\n              break;\n          }\n        }, function complete() {\n          uploadTask.snapshot.ref.getDownloadURL().then(url => resolve(url));\n        });\n      });\n    }\n\n    const putStoageItem = async item => {\n      let name = Object.keys(item)[0];\n      let file = Object.values(item)[0] ? Object.values(item)[0] : null;\n      console.log(name, file);\n\n      if (typeof file === 'string' && file.includes('firebasestorage')) {\n        if (name.includes('video6')) videoFiles[0] = file;else if (name.includes('video7')) videoFiles[1] = file;else if (name.includes('video8')) videoFiles[2] = file;\n        return;\n      } else if (file === null) {\n        // videoFiles.push('');\n        return; // return batch.set(docRef, { videos: \n        //   {\n        //     [name]: '',\n        //   }\n        // }, {merge: true});\n      }\n\n      try {\n        // const snapshot = await storageRef.child(name).put(file);\n        // const url = await snapshot.ref.getDownloadURL();\n        const url = await uploadTaskPromise(name, file);\n        console.log('one success!');\n        if (name.includes('video6')) videoFiles[0] = url;else if (name.includes('video7')) videoFiles[1] = url;else if (name.includes('video8')) videoFiles[2] = url;\n      } catch (err) {\n        return console.log('one failed', err);\n      }\n    };\n\n    Promise.all(videos.map(async item => {\n      return await putStoageItem(item);\n    })).then(() => {\n      batch.update(docRef, {\n        videos: videoFiles\n      });\n      batch.commit();\n      const loader = document.querySelector('#hidden-for-loading');\n      loader.style.display = 'none';\n      console.log('all uploaded');\n    }).then(() => {\n      dispatch({\n        type: 'VIDEO_UPDATE_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'VIDEO_UPDATE_ERROR',\n        err\n      });\n      console.log('err', err);\n    });\n  };\n};\nexport const servicePriceUpdate = (service_id, price) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const docRef = firestore.collection('testService').doc(service_id);\n    const batch = firestore.batch();\n\n    const numberWithCommas = x => {\n      return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    };\n\n    docRef.get().then(doc => {\n      let originPrice = doc.data().price;\n\n      if (price.type === 'BASIC') {\n        if (price.price < 100000) price.price = numberWithCommas(price.price * 10000);\n        originPrice[0] = price;\n      } else if (price.type === 'PRO') {\n        if (price.price < 100000) price.price = numberWithCommas(price.price * 10000);\n        originPrice[1] = price;\n      }\n\n      batch.update(docRef, {\n        price: originPrice\n      });\n    }).then(() => {\n      batch.commit();\n      console.log('updated price!');\n    }).then(() => {\n      dispatch({\n        type: 'UPDATE_PRICE_SUCCESS'\n      });\n      console.log('success!');\n    }).catch(err => {\n      dispatch({\n        type: 'UPDATE_PRICE_ERROR',\n        err\n      });\n      console.log('failed!', err);\n    });\n  };\n};\nexport const providerRegister = (providerData, history) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const userProfile = getState().firebase.profile;\n    const userRef = firestore.collection('users').doc(userAuth.uid);\n    const docRef = firestore.collection('providersTest').doc(userAuth.uid);\n    const chatRealtimeImg = firestore.collection('chats').doc('realtimeImg');\n    const storageRef = firebase.storage().ref('images/users/' + userAuth.uid).child('profileImg');\n    const uploadTask = storageRef.put(providerData.profileFile);\n    uploadTask.on('state_changed', function (snapshot) {\n      let progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      let loader = document.querySelector('#hidden-for-loading');\n      let determinate = document.querySelector('#hidden-for-loading .progress .determinate');\n      loader.style.display = 'block';\n      determinate.style.width = progress + '%';\n    }, function (err) {\n      switch (err.code) {\n        case 'storage/unauthorized':\n          console.log('no authorization');\n          break;\n\n        case 'storage/canceled':\n          console.log('canceled');\n          break;\n\n        case 'storage/unknown':\n          console.log('unknown error');\n          break;\n      }\n    }, function () {\n      uploadTask.snapshot.ref.getDownloadURL().then(url => {\n        userRef.update({\n          profileImgURL: url,\n          // profileImgURL: 'gs://myom-d144a.appspot.com/images/users/' + userAuth.uid + '/profileImg',\n          editor: false\n        });\n        docRef.set({\n          // profileImgURL: 'gs://myom-d144a.appspot.com/images/users/' + userAuth.uid + '/profileImg',\n          profileImgURL: url\n        });\n        chatRealtimeImg.update({\n          [userProfile.initials]: url\n        });\n      }).then(() => {\n        docRef.update({\n          email: userAuth.email,\n          uid: userAuth.uid,\n          nickname: userProfile.initials,\n          personal_feelings: providerData.personal_feelings,\n          account_bank: providerData.account_bank,\n          account_person: providerData.account_person,\n          account_number: providerData.account_number,\n          editorTool: providerData.editorTool,\n          histories: providerData.histories,\n          intro: providerData.intro,\n          registerAt: new Date()\n        });\n      }).then(() => {\n        dispatch({\n          type: \"REGISTER_PROVIDER_SUCCESS\"\n        });\n        history.push('/providerRegisterDone');\n        console.log('success!');\n      }).catch(err => {\n        dispatch({\n          type: \"REGISTER_PROVIDER_ERROR\",\n          err\n        });\n        console.log('failed!', err);\n      });\n    }); // storageRef.put(providerData.profileFile)\n    // .then(snapshot => { return snapshot.ref.getDownloadURL() })\n    // .then(url => {\n    //   userRef.update({\n    //     profileImgURL: url,\n    //     editor: false,\n    //   });\n    //   docRef.set({\n    //     profileImgURL: url,\n    //   })\n    // })\n    // .then(() => {\n    //   docRef.update({\n    //     email: userAuth.email,\n    //     uid: userAuth.uid,\n    //     account_bank: providerData.account_bank,\n    //     account_person: providerData.account_person,\n    //     account_number: providerData.account_number,\n    //     editorTool: providerData.editorTool,\n    //     histories: providerData.histories,\n    //     intro: providerData.intro,\n    //   })\n    // })\n    // .then(() => {\n    //   dispatch({type: \"REGISTER_PROVIDER_SUCCESS\"});\n    //   history.push('/providerRegisterDone');\n    //   console.log('success!');\n    // })\n    // .catch((err) => {\n    //   dispatch({type: \"REGISTER_PROVIDER_ERROR\", err});\n    //   console.log('failed!', err);\n    // })\n  };\n}; // export const serviceRegister = (serviceData, history) => {\n//   return (dispatch, getState, { getFirestore }) => {\n//     const firestore = getFirestore();\n//     const userAuth = getState().firebase.auth;\n//     let docRef = firestore.collection('services').doc();\n//     let storageRef = firebase.storage().ref('images/services/' + docRef.id).child(serviceData.service_img.name);\n//     storageRef.put(serviceData.service_img)\n//       .then(() => {\n//         storageRef.getDownloadURL()\n//           .then((url) => {\n//             // services collection's document\n//             docRef.set({\n//               serviceProvider: userAuth.uid,\n//               category: serviceData.service_type,\n//               description: [\n//                 { title: '서비스 설명', contents: serviceData.service_desc},\n//                 { title: '작업 과정', contents: serviceData.service_process},\n//                 { title: '작업 방식', contents: serviceData.service_doing},\n//                 { title: '작업 스타일', contents: serviceData.service_style},\n//               ],\n//               filter: null,\n//               imgURL: url,\n//               inquiryCount: 0,\n//               reviewCount: 0,\n//               prices: [\n//                 { price: serviceData.service_price_standard, contents: serviceData.standard_desc },\n//                 { price: serviceData.service_price_deluxe, contents: serviceData.deluxe_desc },\n//                 { price: serviceData.service_price_premium, contents: serviceData.premium_desc },\n//               ],\n//               timestamp: new Date(),\n//             });\n//             services collections's sub-collection's document: reviews\n//             docRef.collection('reviews').add({\n//               contents: '',\n//               profile: '',\n//               starts: '',\n//               timestamp: '',\n//               userID: '',\n//               uid: '',\n//             });\n//             services collections's sub-collection's document: inquiry\n//             docRef.collection('inquiry').add({\n//               comment: null,\n//               contents: '',\n//               timestamp: '',\n//               userID: '',\n//               uid: '',\n//             });\n//           });\n//       })\n//     .then(() => {\n//       dispatch({ type: 'REGISTER_SERVICE_SUCCESS', serviceData });\n//       history.push('/mypageProvider/myServices');\n//     }).catch((err) => {\n//       dispatch({ type: 'REGISTER_SERVICE_ERROR', err })\n//     })\n//   }\n// }\n\nexport const serviceDelete = (curInstance, id, password) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const user = firebase.auth().currentUser;\n    const credentials = firebase.auth.EmailAuthProvider.credential(user.email, password);\n    let key_for_subCollection = false;\n    let docRef = firestore.collection('services').doc(id);\n    user.reauthenticateWithCredential(credentials).then(() => {\n      return docRef.get().then(doc => {\n        if (doc.exists) {\n          return docRef.collection('inquiry').get().then(sub => {\n            // if inquiry sub-collection exists\n            if (sub.docs.length > 0) {\n              // console.log('inquiry exists!')        \n              key_for_subCollection = true; // { code : 'inquiry/already-exist' }\n            }\n          });\n          return docRef.collection('reviews').get().then(sub => {\n            // if reviews sub-collection exists\n            if (sub.docs.length > 0) {\n              //console.log('reviews exists!')\n              key_for_subCollection = true; // throw new Error('reviews error!')\n              // { code : 'reviews/already-exist' }\n            }\n          });\n        }\n      });\n    }).then(() => {\n      if (key_for_subCollection) throw {\n        code: 'inquiry&reviews/already-exist'\n      };\n    }).then(() => {\n      docRef.get().then(doc => {\n        const fromURL = doc.data().imgURL;\n        const storageRef = firebase.storage().refFromURL(fromURL);\n        storageRef.delete().then(() => {\n          docRef.delete();\n          curInstance.close();\n        });\n      });\n    }).then(() => {\n      dispatch({\n        type: 'DELETE_SERVICE_SUCCESS'\n      }); // history.push('/mypageProvider/myServices');\n    }).catch(err => {\n      console.log(err.code);\n\n      switch (err.code) {\n        case \"auth/wrong-password\":\n          console.log(err);\n          dispatch({\n            type: 'CHECK_PASSWORD_ERROR',\n            err\n          });\n          break;\n\n        case \"auth/too-many-requests\":\n          console.log(err);\n          dispatch({\n            type: 'TOO_MANY_REQUESTS_FOR_VERIFICATION'\n          });\n          break;\n\n        case 'inquiry&reviews/already-exist':\n          console.log(err);\n          dispatch({\n            type: 'DELETE_SERVICE_ERROR_WITH_INQUIRY&REVIEWS'\n          });\n          break;\n\n        default:\n          console.log(err);\n          dispatch({\n            type: 'DELETE_SERVICE_ERROR'\n          });\n      }\n    });\n  };\n};\nexport const serviceUpdate = (serviceData, history) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    let docRef = firestore.collection('services').doc(serviceData.service_id);\n    let storageRef = firebase.storage().ref('images/services/' + docRef.id);\n    docRef.get().then(doc => {\n      const fromURL = doc.data().imgURL;\n      const httpsRef = firebase.storage().refFromURL(fromURL);\n      httpsRef.delete().then(() => {\n        storageRef.child(serviceData.service_img.name).put(serviceData.service_img).then(() => {\n          storageRef.child(serviceData.service_img.name).getDownloadURL().then(url => {\n            docRef.update({\n              category: serviceData.service_type,\n              description: [{\n                title: '서비스 설명',\n                contents: serviceData.service_desc\n              }, {\n                title: '작업 과정',\n                contents: serviceData.service_process\n              }, {\n                title: '작업 방식',\n                contents: serviceData.service_doing\n              }, {\n                title: '작업 스타일',\n                contents: serviceData.service_style\n              }],\n              imgURL: url,\n              prices: [{\n                price: serviceData.service_price_standard,\n                contents: serviceData.standard_desc\n              }, {\n                price: serviceData.service_price_deluxe,\n                contents: serviceData.deluxe_desc\n              }, {\n                price: serviceData.service_price_premium,\n                contents: serviceData.premium_desc\n              }],\n              updatedAt: new Date()\n            });\n          });\n        });\n      }).then(() => {\n        dispatch({\n          type: 'UPDATE_SERVICE_SUCCESS',\n          serviceData\n        });\n        history.push('/mypageProvider/myServices');\n      }).catch(err => {\n        dispatch({\n          type: 'UPDATE_SERVICE_ERROR',\n          err\n        });\n      });\n    });\n  };\n};\nexport const inquiryRegister = (docID, inquiryData) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const docRef = firestore.collection('services').doc(docID);\n    docRef.collection('inquiry').add({\n      comment: [],\n      contents: inquiryData.inquiry_contents,\n      userID: userAuth.email,\n      uid: userAuth.uid,\n      timestamp: new Date()\n    }).then(() => {\n      docRef.get().then(doc => {\n        const inquiryCount = doc.data().inquiryCount;\n        docRef.update({\n          inquiryCount: inquiryCount + 1\n        });\n      }).then(() => {\n        dispatch({\n          type: 'CREATE_INQUIRY_SUCCESS',\n          inquiryData\n        });\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'CREATE_INQUIRY_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const reviewsRegister = (docID, reviewsData) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const userProfile = getState().firebase.profile;\n    const docRef = firestore.collection('services').doc(docID);\n    docRef.collection('reviews').add({\n      comment: [],\n      stars: '',\n      profile: userProfile,\n      contents: reviewsData.reviews_contents,\n      userID: userAuth.email,\n      uid: userAuth.uid,\n      timestamp: new Date()\n    }).then(() => {\n      docRef.get().then(doc => {\n        const reviewCount = doc.data().reviewCount;\n        docRef.update({\n          reviewCount: reviewCount + 1\n        });\n      }).then(() => {\n        dispatch({\n          type: 'CREATE_REVIEWS_SUCCESS',\n          reviewsData\n        });\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'CREATE_REVIEWS_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const _init_authError = authError => {\n  return dispatch => {\n    if (authError) dispatch({\n      type: 'INIT_AUTHERROR_SUCCESS'\n    });\n  };\n};\nexport const _delete_inquiry = (service_id, inquiry_id) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userAuth = getState();\n    const docRef = firestore.collection('services').doc(service_id);\n    const subRef = docRef.collection('inquiry').doc(inquiry_id);\n    subRef.delete().then(() => {\n      return docRef.get().then(doc => {\n        const inquiryCount = doc.data().inquiryCount;\n        docRef.update({\n          inquiryCount: inquiryCount - 1\n        });\n      });\n    }).then(() => {\n      dispatch({\n        type: 'DELETE_INQUIRY_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'DELETE_INQUIRY_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const _delete_review = (service_id, review_id) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const docRef = firestore.collection('services').doc(service_id);\n    const subRef = docRef.collection('reviews').doc(review_id);\n    subRef.delete().then(() => {\n      return docRef.get().then(doc => {\n        const reviewCount = doc.data().reviewCount;\n        docRef.update({\n          reviewCount: reviewCount - 1\n        });\n      });\n    }).then(() => {\n      dispatch({\n        type: 'DELETE_REIVEW_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'DELETE_REIVEW_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const _update_inquiry = (service_id, inquiry_id, updating_data) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const docRef = firestore.collection('services').doc(service_id);\n    const subRef = docRef.collection('inquiry').doc(inquiry_id);\n    subRef.update({\n      contents: updating_data\n    }).then(() => {\n      dispatch({\n        type: 'UPDATE_INQUIRY_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'UPDATE_INQUIRY_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const _update_review = (service_id, review_id, updating_data) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const docRef = firestore.collection('services').doc(service_id);\n    const subRef = docRef.collection('reviews').doc(review_id);\n    subRef.update({\n      contents: updating_data\n    }).then(() => {\n      dispatch({\n        type: 'UPDATE_REVIEW_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'UPDATE_REVIEW_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const _report_badUser = () => {\n  return dispatch => {\n    dispatch({\n      type: 'REPORT_BADUSER_SUCCESS'\n    });\n  };\n};","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/src/store/actions/serviceFormAction.js"],"names":["firebase","createService","serviceData","history","dispatch","getState","getFirestore","firestore","userAuth","auth","userProfile","profile","userRef","collection","doc","uid","docRef","storageRef","storage","ref","id","batch","basic_chips","pro_chips","videos","fileArray","images","forEach","item","Object","values","file","File","numberWithCommas","x","toString","replace","uploadTaskPromise","name","Promise","resolve","reject","uploadTask","child","put","on","snapshot","progress","bytesTransferred","totalBytes","loader","document","querySelector","determinate","style","display","width","err","code","console","log","complete","getDownloadURL","then","url","putStoageItem","index","type","split","shift","set","merge","push","all","map","priority2","priority3","update","hasOwnService","ownServiceId","priority1","price","basic_price","intro","basic_intro","working","basic_working","modify","basic_modify","chips","runningTime","basic_runningTime","additional_price","basic_additional_runningTime","pro_price","pro_intro","pro_working","pro_modify","pro_runningTime","pro_additional_runningTime","service_title","service_content","service_refund","provider_id","provider_email","email","provider_nickName","initials","providerImg","profileImgURL","timestamp","Date","personal_feeling","reviewCount","commit","catch","message","serviceContentUpdate","service_id","target_id","serviceImgUpdate","serviceImgs","imgs","entries","filter","img","includes","keys","serviceVideoUpdate","serviceVideos","videoFiles","video","servicePriceUpdate","get","originPrice","data","providerRegister","providerData","chatRealtimeImg","profileFile","editor","nickname","personal_feelings","account_bank","account_person","account_number","editorTool","histories","registerAt","serviceDelete","curInstance","password","user","currentUser","credentials","EmailAuthProvider","credential","key_for_subCollection","reauthenticateWithCredential","exists","sub","docs","length","fromURL","imgURL","refFromURL","delete","close","serviceUpdate","httpsRef","service_img","category","service_type","description","title","contents","service_desc","service_process","service_doing","service_style","prices","service_price_standard","standard_desc","service_price_deluxe","deluxe_desc","service_price_premium","premium_desc","updatedAt","inquiryRegister","docID","inquiryData","add","comment","inquiry_contents","userID","inquiryCount","reviewsRegister","reviewsData","stars","reviews_contents","_init_authError","authError","_delete_inquiry","inquiry_id","subRef","_delete_review","review_id","_update_inquiry","updating_data","_update_review","_report_badUser"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\n\nexport const createService = (serviceData, history) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const userProfile = getState().firebase.profile;\n    const userRef = firestore.collection('users').doc(userAuth.uid);\n    const docRef = firestore.collection('testService').doc();\n    const storageRef = firebase.storage().ref('images/testService/' + docRef.id);\n    let batch = firestore.batch();\n    let basic_chips = serviceData.basic_chips ? serviceData.basic_chips : [];\n    let pro_chips = serviceData.pro_chips ? serviceData.pro_chips : [];\n    let videos = [];\n    let fileArray = []\n\n    serviceData.images.forEach(item => Object.values(item).forEach(file => {\n      if(file instanceof File) fileArray = [...fileArray, file];\n    }));\n    serviceData.videos.forEach(item => Object.values(item).forEach(file => {\n      if(file instanceof File) fileArray = [...fileArray, file];\n    }));\n\n\n    \n\n    const numberWithCommas = (x) => {\n      return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    async function uploadTaskPromise(name, item) {\n      return new Promise(function(resolve, reject) {\n        const uploadTask = storageRef.child(name).put(item);\n        uploadTask.on('state_changed', function(snapshot) {\n          let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          let loader = document.querySelector('#hidden-for-loading');\n          let determinate = document.querySelector('#hidden-for-loading .progress .determinate');\n\n          loader.style.display = 'block';\n          determinate.style.width = progress + '%';\n          \n        }, function(err) {\n          switch(err.code) {\n            case 'storage/unauthorized':\n              console.log('no authorization')\n              break;\n            \n            case 'storage/canceled':\n              console.log('canceled')\n              break;\n            \n            case 'storage/unknown':\n              console.log('unknown error');\n              break;\n          }\n        }, function complete() {\n          console.log('done')\n          uploadTask.snapshot.ref.getDownloadURL().then(url => resolve(url))\n        })\n      })\n    }\n\n\n\n\n    const putStoageItem = async (item, index) => {\n      let type = item.type;\n      let name;\n      \n      if(type.split('/').shift() === 'image') {\n        if(index === 0) name = 'thumbnail';\n        else name = 'details' + index;\n      } else name = 'video' + index;\n\n      let url = await uploadTaskPromise(name, item);\n\n      if(type.split('/').shift() === 'image') {\n        batch.set(docRef, { images: \n          {\n            [name]: url,\n          }\n        }, {merge: true});\n      } else {\n        videos.push(url);\n      }\n      \n    }\n    //   return storageRef.child(name).put(item)\n    //   .then((snapshot) => { return snapshot.ref.getDownloadURL() })\n    //   .then((url) => { \n    //     console.log('one success!')\n    //     if(type.split('/').shift() === 'image') {\n    //       batch.set(docRef, { images: \n    //         {\n    //           [name]: url,\n    //         }\n    //       }, {merge: true});\n    //     } else {\n    //       videos.push(url);\n    //     }\n    //   })\n    //   .catch((err) => console.log('one failed', err.message))\n    // }\n\n    Promise.all(fileArray.map(async (item, index) => {\n      await putStoageItem(item, index);\n    }))\n    .then(() => {\n      if(serviceData.priority2) {\n        batch.set(docRef, {\n          [serviceData.priority2]: 3,\n        }, {merge: true})\n      }\n      if(serviceData.priority3) {\n        batch.set(docRef, {\n          [serviceData.priority3]: 1,\n        }, {merge: true})\n      }\n      batch.update(userRef, {\n        hasOwnService: true,\n        ownServiceId: docRef.id,\n      });\n\n      batch.set(docRef, {\n        [serviceData.priority1]: 5,\n        price: [\n          {\n            type: 'BASIC',\n            price: numberWithCommas(serviceData.basic_price * 10000),\n            intro: serviceData.basic_intro,\n            working: serviceData.basic_working,\n            modify: serviceData.basic_modify,\n            chips: ['자막', '음악', '컷편집', ...basic_chips],\n            runningTime: serviceData.basic_runningTime,\n            additional_price: serviceData.basic_additional_runningTime\n          },\n          {\n            type: 'PRO',\n            price: numberWithCommas(serviceData.pro_price * 10000),\n            intro: serviceData.pro_intro,\n            working: serviceData.pro_working,\n            modify: serviceData.pro_modify,\n            chips: ['자막', '음악', '컷편집', '기본 색보정', ...pro_chips],\n            runningTime: serviceData.pro_runningTime,\n            additional_price: serviceData.pro_additional_runningTime\n          }\n        ],     \n        service_title: serviceData.service_title, \n        service_content: serviceData.service_content,\n        service_refund: serviceData.service_refund,\n        videos: videos,\n        provider_id: userAuth.uid,\n        provider_email: userAuth.email,\n        provider_nickName : userProfile.initials,\n        providerImg: userProfile.profileImgURL,\n        timestamp: new Date(),\n        personal_feeling: serviceData.personal_feeling ? serviceData.personal_feeling : '',\n        reviewCount: 0,\n      }, {merge: true});\n\n      batch.commit();\n    })\n    .then(() => {\n      history.push('/mypageProvider/serviceSetting');\n      dispatch({type: 'CREATE_SERVICE_SUCESS',});\n    })\n    .catch((err) => {\n      console.log('failed', err.message);\n      dispatch({type: 'CREATE_SERVICE_ERROR', err});\n    })\n  }\n}\n\nexport const serviceContentUpdate = (service_id, serviceData, target_id) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const docRef = firestore.collection('testService').doc(service_id);\n\n    docRef.update({\n      [target_id]: serviceData,\n    })\n    .then(() => {\n      console.log('updated success!')\n      dispatch({type: 'TITLE_UPDATE_SUCCESS'});\n    })\n    .catch((err) => {\n      console.log('error!', err)\n      dispatch({type: 'TITLE_UPDATE_ERROR', err});\n    })\n  }\n}\n\nexport const serviceImgUpdate = (service_id, serviceImgs) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const docRef = firestore.collection('testService').doc(service_id);\n    const storageRef = firebase.storage().ref('images/testService/' + service_id);\n    const batch = firestore.batch();\n    const imgs = Object.entries(serviceImgs).filter(img => img[0].includes('file'))\n      .map(name => ({ [name[0].split('_').shift()] : name[1] }));    \n\n    async function uploadTaskPromise(name, item) {\n      return new Promise(function(resolve, reject) {\n        const uploadTask = storageRef.child(name).put(item);\n        uploadTask.on('state_changed', function(snapshot) {\n          let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          let loader = document.querySelector('#hidden-for-loading');\n          let determinate = document.querySelector('#hidden-for-loading .progress .determinate');\n    \n          loader.style.display = 'block';\n          determinate.style.width = progress + '%';           \n        }, function(err) {\n          switch(err.code) {\n            case 'storage/unauthorized':\n              console.log('no authorization')\n              break;\n                \n            case 'storage/canceled':\n              console.log('canceled')\n              break;\n                \n            case 'storage/unknown':\n              console.log('unknown error');\n              break;\n          }\n        }, function complete() {\n          uploadTask.snapshot.ref.getDownloadURL().then(url => resolve(url))\n        })\n      })\n    }\n\n    const putStoageItem = async (item) => {\n      let name = Object.keys(item)[0];\n      let file = Object.values(item)[0] ? Object.values(item)[0] : null;\n\n      if(file === null) {\n        return batch.set(docRef, { images: \n          {\n            [name]: '',\n          }\n        }, {merge: true});\n      }\n\n      try {\n        const url = await uploadTaskPromise(name, file);\n        console.log('one success!');\n\n        batch.set(docRef, { images: \n          {\n            [name] : url,\n          }\n        }, {merge: true});\n      }\n      catch(err) {\n        console.log('one failes', err.message);\n      }\n\n      // return storageRef.child(name).put(file)\n      // .then((snapshot) => { return snapshot.ref.getDownloadURL() })\n      // .then((url) => { \n      //   console.log('one success!') \n      //   batch.set(docRef, { images: \n      //     {\n      //       [name]: url,\n      //     }\n      //   }, {merge: true});\n      // })\n      // .catch((err) => console.log('one failed', err.message))\n    }\n\n    Promise.all(imgs.map(async (item) => {\n      await putStoageItem(item);\n    }))\n    .then(() => {\n      batch.commit();\n      const loader = document.querySelector('#hidden-for-loading');\n      loader.style.display = 'none';\n      console.log('all uploaded');\n    })\n    .then(() => {\n      dispatch({ type: 'IMAGE_UPDATE_SUCCESS'});\n    })\n    .catch((err) => {\n      dispatch({ type: 'IMAGE_UPDATE_ERROR', err})\n      console.log('err', err);\n    })\n  }\n}\n\nexport const serviceVideoUpdate = (service_id, serviceVideos) => {\n  return (dispatch, getState, { getFirestore }) => {\n    let videoFiles = [];\n    const firestore = getFirestore();\n    const docRef = firestore.collection('testService').doc(service_id);\n    const storageRef = firebase.storage().ref('images/testService/' + service_id);\n    const batch = firestore.batch();\n    const videos = Object.entries(serviceVideos).filter(video => video[0].includes('file'))\n      .map(name => ({ [name[0].split('_').shift()] : name[1] }));\n    \n    async function uploadTaskPromise(name, item) {\n      return new Promise(function(resolve, reject) {\n        const uploadTask = storageRef.child(name).put(item);\n        uploadTask.on('state_changed', function(snapshot) {\n          let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          let loader = document.querySelector('#hidden-for-loading');\n          let determinate = document.querySelector('#hidden-for-loading .progress .determinate');\n  \n          loader.style.display = 'block';\n          determinate.style.width = progress + '%';           \n        }, function(err) {\n          switch(err.code) {\n            case 'storage/unauthorized':\n              console.log('no authorization')\n              break;\n              \n            case 'storage/canceled':\n              console.log('canceled')\n              break;\n              \n            case 'storage/unknown':\n              console.log('unknown error');\n              break;\n          }\n        }, function complete() {\n          uploadTask.snapshot.ref.getDownloadURL().then(url => resolve(url))\n        })\n      })\n    }\n\n    const putStoageItem = async (item) => {\n      let name = Object.keys(item)[0];\n      let file = Object.values(item)[0] ? Object.values(item)[0] : null;\n\n      console.log(name, file);\n\n      if(typeof(file) === 'string' && file.includes('firebasestorage')) {\n        if(name.includes('video6')) videoFiles[0] = file;\n        else if(name.includes('video7')) videoFiles[1] = file;\n        else if(name.includes('video8')) videoFiles[2] = file;\n\n        return;\n      }\n      else if(file === null) {\n        // videoFiles.push('');\n        return;\n        // return batch.set(docRef, { videos: \n        //   {\n        //     [name]: '',\n        //   }\n        // }, {merge: true});\n      }\n\n      try {\n        // const snapshot = await storageRef.child(name).put(file);\n        // const url = await snapshot.ref.getDownloadURL();\n        const url = await uploadTaskPromise(name, file);\n        console.log('one success!');\n\n        if(name.includes('video6')) videoFiles[0] = url;\n        else if(name.includes('video7')) videoFiles[1] = url;\n        else if(name.includes('video8')) videoFiles[2] = url;\n\n      }\n      catch (err) {\n        return console.log('one failed', err);\n      }\n    }\n  \n    Promise.all(videos.map(async (item) => {\n      return await putStoageItem(item);\n    }))\n    .then(() => {\n      batch.update(docRef, {\n        videos: videoFiles,\n      });\n\n      batch.commit();\n      const loader = document.querySelector('#hidden-for-loading');\n      loader.style.display = 'none';\n      console.log('all uploaded');\n    })\n    .then(() => {\n      dispatch({ type: 'VIDEO_UPDATE_SUCCESS'});\n    })\n    .catch((err) => {\n      dispatch({ type: 'VIDEO_UPDATE_ERROR', err});\n      console.log('err', err);\n    })\n  }\n}\n\nexport const servicePriceUpdate = (service_id, price) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const docRef = firestore.collection('testService').doc(service_id);\n    const batch = firestore.batch();\n    const numberWithCommas = (x) => {\n      return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    docRef.get().then(doc => {\n      let originPrice = doc.data().price;\n\n      if(price.type === 'BASIC') {\n        if(price.price < 100000) price.price = numberWithCommas(price.price * 10000);\n        originPrice[0] = price;  \n      }\n      else if(price.type === 'PRO') {\n        if(price.price < 100000) price.price = numberWithCommas(price.price * 10000);\n        originPrice[1] = price;\n      }\n\n      batch.update(docRef, {\n        price: originPrice,\n      })\n    })\n    .then(() => {\n      batch.commit();\n      console.log('updated price!')\n    })\n    .then(() => {\n      dispatch({ type: 'UPDATE_PRICE_SUCCESS'});\n      console.log('success!');\n    })\n    .catch((err) => {\n      dispatch({ type: 'UPDATE_PRICE_ERROR', err});\n      console.log('failed!', err);\n    })\n\n\n  }\n}\n\nexport const providerRegister = (providerData, history) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const userProfile = getState().firebase.profile;\n    const userRef = firestore.collection('users').doc(userAuth.uid);\n    const docRef = firestore.collection('providersTest').doc(userAuth.uid);\n    const chatRealtimeImg = firestore.collection('chats').doc('realtimeImg');\n    const storageRef = firebase.storage().ref('images/users/' + userAuth.uid).child('profileImg');\n    const uploadTask = storageRef.put(providerData.profileFile);\n\n    \n    uploadTask.on('state_changed', function(snapshot) {\n      let progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      let loader = document.querySelector('#hidden-for-loading');\n      let determinate = document.querySelector('#hidden-for-loading .progress .determinate');\n\n      loader.style.display = 'block';\n      determinate.style.width = progress + '%';\n    }, function(err) {\n      switch(err.code) {\n        case 'storage/unauthorized':\n          console.log('no authorization')\n          break;\n        \n        case 'storage/canceled':\n          console.log('canceled')\n          break;\n        \n        case 'storage/unknown':\n          console.log('unknown error');\n          break;\n      }\n    }, function() {\n      uploadTask.snapshot.ref.getDownloadURL().then(url => {\n        userRef.update({\n          profileImgURL: url,\n          // profileImgURL: 'gs://myom-d144a.appspot.com/images/users/' + userAuth.uid + '/profileImg',\n          editor: false,\n        });\n        docRef.set({\n          // profileImgURL: 'gs://myom-d144a.appspot.com/images/users/' + userAuth.uid + '/profileImg',\n          profileImgURL: url,\n        })\n        chatRealtimeImg.update({\n          [userProfile.initials] : url,\n        })\n      })\n      .then(() => {\n        docRef.update({\n          email: userAuth.email,\n          uid: userAuth.uid,\n          nickname: userProfile.initials,\n          personal_feelings: providerData.personal_feelings,\n          account_bank: providerData.account_bank,\n          account_person: providerData.account_person,\n          account_number: providerData.account_number,\n          editorTool: providerData.editorTool,\n          histories: providerData.histories,\n          intro: providerData.intro,\n          registerAt: new Date(),\n        })\n      })\n      .then(() => {\n        dispatch({type: \"REGISTER_PROVIDER_SUCCESS\"});\n        history.push('/providerRegisterDone');\n        console.log('success!');\n      })\n      .catch((err) => {\n        dispatch({type: \"REGISTER_PROVIDER_ERROR\", err});\n        console.log('failed!', err);\n      })  \n    })\n\n    // storageRef.put(providerData.profileFile)\n    // .then(snapshot => { return snapshot.ref.getDownloadURL() })\n    // .then(url => {\n    //   userRef.update({\n    //     profileImgURL: url,\n    //     editor: false,\n    //   });\n    //   docRef.set({\n    //     profileImgURL: url,\n    //   })\n    // })\n    // .then(() => {\n    //   docRef.update({\n    //     email: userAuth.email,\n    //     uid: userAuth.uid,\n    //     account_bank: providerData.account_bank,\n    //     account_person: providerData.account_person,\n    //     account_number: providerData.account_number,\n    //     editorTool: providerData.editorTool,\n    //     histories: providerData.histories,\n    //     intro: providerData.intro,\n    //   })\n    // })\n    // .then(() => {\n    //   dispatch({type: \"REGISTER_PROVIDER_SUCCESS\"});\n    //   history.push('/providerRegisterDone');\n    //   console.log('success!');\n    // })\n    // .catch((err) => {\n    //   dispatch({type: \"REGISTER_PROVIDER_ERROR\", err});\n    //   console.log('failed!', err);\n    // })\n\n  }\n}\n// export const serviceRegister = (serviceData, history) => {\n//   return (dispatch, getState, { getFirestore }) => {\n//     const firestore = getFirestore();\n//     const userAuth = getState().firebase.auth;\n//     let docRef = firestore.collection('services').doc();\n//     let storageRef = firebase.storage().ref('images/services/' + docRef.id).child(serviceData.service_img.name);\n//     storageRef.put(serviceData.service_img)\n//       .then(() => {\n//         storageRef.getDownloadURL()\n//           .then((url) => {\n//             // services collection's document\n//             docRef.set({\n//               serviceProvider: userAuth.uid,\n//               category: serviceData.service_type,\n//               description: [\n//                 { title: '서비스 설명', contents: serviceData.service_desc},\n//                 { title: '작업 과정', contents: serviceData.service_process},\n//                 { title: '작업 방식', contents: serviceData.service_doing},\n//                 { title: '작업 스타일', contents: serviceData.service_style},\n//               ],\n//               filter: null,\n//               imgURL: url,\n//               inquiryCount: 0,\n//               reviewCount: 0,\n//               prices: [\n//                 { price: serviceData.service_price_standard, contents: serviceData.standard_desc },\n//                 { price: serviceData.service_price_deluxe, contents: serviceData.deluxe_desc },\n//                 { price: serviceData.service_price_premium, contents: serviceData.premium_desc },\n//               ],\n//               timestamp: new Date(),\n//             });\n//             services collections's sub-collection's document: reviews\n//             docRef.collection('reviews').add({\n//               contents: '',\n//               profile: '',\n//               starts: '',\n//               timestamp: '',\n//               userID: '',\n//               uid: '',\n//             });\n//             services collections's sub-collection's document: inquiry\n//             docRef.collection('inquiry').add({\n//               comment: null,\n//               contents: '',\n//               timestamp: '',\n//               userID: '',\n//               uid: '',\n//             });\n//           });\n//       })\n//     .then(() => {\n//       dispatch({ type: 'REGISTER_SERVICE_SUCCESS', serviceData });\n//       history.push('/mypageProvider/myServices');\n//     }).catch((err) => {\n//       dispatch({ type: 'REGISTER_SERVICE_ERROR', err })\n//     })\n//   }\n// }\n\nexport const serviceDelete = (curInstance, id, password) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const user = firebase.auth().currentUser;\n    const credentials = firebase.auth.EmailAuthProvider.credential(user.email, password);\n    let key_for_subCollection = false;\n    let docRef = firestore.collection('services').doc(id);\n  \n    user.reauthenticateWithCredential(credentials)\n      .then(() => {\n        return docRef.get().then((doc) => {\n          if(doc.exists) {\n            return docRef.collection('inquiry').get().then(sub => {    // if inquiry sub-collection exists\n              if(sub.docs.length > 0) {    \n                // console.log('inquiry exists!')        \n                key_for_subCollection = true;\n                // { code : 'inquiry/already-exist' }\n              }\n            })\n            return docRef.collection('reviews').get().then(sub => {    // if reviews sub-collection exists\n              if(sub.docs.length > 0) {        \n                //console.log('reviews exists!')\n                key_for_subCollection = true;        \n                // throw new Error('reviews error!')\n                // { code : 'reviews/already-exist' }\n              }\n            })\n          }\n        })\n      })\n      .then(() => {\n        if(key_for_subCollection) throw { code : 'inquiry&reviews/already-exist' }\n      })\n      .then(() => {\n        docRef.get().then((doc) => {\n          const fromURL = doc.data().imgURL;\n          const storageRef = firebase.storage().refFromURL(fromURL);\n\n          storageRef.delete().then(() => {\n            docRef.delete();\n            curInstance.close();\n          })\n        })\n      })\n      .then(() => {\n        dispatch({ type: 'DELETE_SERVICE_SUCCESS', })\n        // history.push('/mypageProvider/myServices');\n      })\n      .catch((err) => {\n        console.log(err.code);\n        switch(err.code) {\n          case \"auth/wrong-password\":\n            console.log(err)\n            dispatch({type: 'CHECK_PASSWORD_ERROR', err});\n            break;\n          \n          case \"auth/too-many-requests\":\n            console.log(err);\n            dispatch({type: 'TOO_MANY_REQUESTS_FOR_VERIFICATION'});\n            break;\n\n          case 'inquiry&reviews/already-exist':\n            console.log(err);\n            dispatch({ type: 'DELETE_SERVICE_ERROR_WITH_INQUIRY&REVIEWS' });\n            break;\n\n          default:\n            console.log(err)\n            dispatch({ type: 'DELETE_SERVICE_ERROR' });\n        }\n    })   \n  }\n}\n\n\n\nexport const serviceUpdate = (serviceData, history) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    let docRef = firestore.collection('services').doc(serviceData.service_id);\n    let storageRef = firebase.storage().ref('images/services/' + docRef.id);\n\n    docRef.get().then((doc) => {\n      const fromURL = doc.data().imgURL;\n      const httpsRef = firebase.storage().refFromURL(fromURL);\n      \n      httpsRef.delete()\n        .then(() => {\n          storageRef.child(serviceData.service_img.name).put(serviceData.service_img)\n          .then(() => {\n            storageRef.child(serviceData.service_img.name).getDownloadURL()\n              .then((url) => {\n                docRef.update({\n                  category: serviceData.service_type,\n                  description: [\n                    { title: '서비스 설명', contents: serviceData.service_desc},\n                    { title: '작업 과정', contents: serviceData.service_process},\n                    { title: '작업 방식', contents: serviceData.service_doing},\n                    { title: '작업 스타일', contents: serviceData.service_style},\n                  ],\n                  imgURL: url,\n                  prices: [\n                    { price: serviceData.service_price_standard, contents: serviceData.standard_desc },\n                    { price: serviceData.service_price_deluxe, contents: serviceData.deluxe_desc },\n                    { price: serviceData.service_price_premium, contents: serviceData.premium_desc },\n                  ],\n                  updatedAt: new Date(),\n                })\n              })\n          })\n        }).then(()=> {\n          dispatch({ type: 'UPDATE_SERVICE_SUCCESS', serviceData });\n          history.push('/mypageProvider/myServices');\n        }).catch((err) => {\n          dispatch({ type: 'UPDATE_SERVICE_ERROR', err })\n        })\n    })\n  }\n}\n\nexport const inquiryRegister = (docID, inquiryData) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const docRef = firestore.collection('services').doc(docID);\n    docRef.collection('inquiry').add({\n      comment: [],\n      contents: inquiryData.inquiry_contents,\n      userID: userAuth.email,\n      uid: userAuth.uid,\n      timestamp: new Date()\n    }).then(() => {\n      docRef.get().then((doc) => {\n        const inquiryCount = doc.data().inquiryCount;\n        docRef.update({\n          inquiryCount: inquiryCount + 1,\n        })\n      }).then(() => {\n        dispatch({type: 'CREATE_INQUIRY_SUCCESS', inquiryData})\n      })\n    }).catch((err) => {\n      dispatch({type: 'CREATE_INQUIRY_ERROR', err})\n    })\n  }\n}\n\nexport const reviewsRegister = (docID, reviewsData) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const userProfile = getState().firebase.profile;\n    const docRef = firestore.collection('services').doc(docID);\n    docRef.collection('reviews').add({\n      comment: [],\n      stars: '',\n      profile: userProfile,\n      contents: reviewsData.reviews_contents,\n      userID: userAuth.email,\n      uid: userAuth.uid,\n      timestamp: new Date(),\n    }).then(() => {\n      docRef.get().then((doc) => {\n        const reviewCount = doc.data().reviewCount;\n        docRef.update({\n          reviewCount: reviewCount + 1,\n        })\n      }).then(() => {\n        dispatch({type: 'CREATE_REVIEWS_SUCCESS', reviewsData})\n      })\n    }).catch((err) => {\n      dispatch({type: 'CREATE_REVIEWS_ERROR', err})\n    })\n  }\n}\n\nexport const _init_authError = (authError) => {\n  return (dispatch) => {\n    if(authError) dispatch({ type : 'INIT_AUTHERROR_SUCCESS'})\n  }\n}\n\nexport const _delete_inquiry = (service_id, inquiry_id) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userAuth = getState();\n    const docRef = firestore.collection('services').doc(service_id);\n    const subRef = docRef.collection('inquiry').doc(inquiry_id);\n\n    subRef.delete()\n    .then(() => {\n      return docRef.get().then((doc) => {\n        const inquiryCount = doc.data().inquiryCount;\n        docRef.update({\n          inquiryCount: inquiryCount - 1,\n        })\n      })\n    })\n    .then(() => {\n      dispatch({ type : 'DELETE_INQUIRY_SUCCESS' });\n    })\n    .catch((err) => {\n      dispatch({ type : 'DELETE_INQUIRY_ERROR', err })\n    })\n  }\n}\nexport const _delete_review = (service_id, review_id) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const docRef = firestore.collection('services').doc(service_id);\n    const subRef = docRef.collection('reviews').doc(review_id);\n\n    subRef.delete()\n    .then(() => {\n      return docRef.get().then((doc) => {\n        const reviewCount = doc.data().reviewCount;\n        docRef.update({\n          reviewCount: reviewCount - 1,\n        })\n      })\n    })\n    .then(() => {\n      dispatch({ type : 'DELETE_REIVEW_SUCCESS' });\n    })\n    .catch((err) => {\n      dispatch({ type : 'DELETE_REIVEW_ERROR', err });\n    })\n  }\n}\nexport const _update_inquiry = (service_id, inquiry_id, updating_data) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const docRef = firestore.collection('services').doc(service_id);\n    const subRef = docRef.collection('inquiry').doc(inquiry_id);\n\n    subRef.update({\n      contents: updating_data,\n    })\n    .then(() => {\n      dispatch({ type: 'UPDATE_INQUIRY_SUCCESS'})\n    })\n    .catch((err) => {\n      dispatch({ type: 'UPDATE_INQUIRY_ERROR', err})\n    })\n  }\n}\n\nexport const _update_review = (service_id, review_id, updating_data) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userAuth = getState().firebase.auth;\n    const docRef = firestore.collection('services').doc(service_id);\n    const subRef = docRef.collection('reviews').doc(review_id);\n\n    subRef.update({\n      contents: updating_data,\n    })\n    .then(() => {\n      dispatch({ type: 'UPDATE_REVIEW_SUCCESS' })\n    })\n    .catch((err) => {\n      dispatch({ type: 'UPDATE_REVIEW_ERROR', err})\n    })\n  }\n}\n\nexport const _report_badUser = () => {\n  return (dispatch) => {\n    dispatch({type: 'REPORT_BADUSER_SUCCESS'})\n  }\n}"]},"metadata":{},"sourceType":"module"}