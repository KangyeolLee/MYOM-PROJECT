{"ast":null,"code":"import _objectSpread from \"/Users/JeHongHwang/Desktop/leekang/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app';\nexport const _buy_service = (service_id, service, price, plus, history) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userInfo = getState().firebase.auth;\n    const userProfile = getState().firebase.profile; // const userRef = firestore.collection('users').doc(userInfo.uid);\n    // const providerRef = firestore.collection('users').doc(service.serviceProvider);\n\n    const listRef = firestore.collection('purchaseList').doc();\n    const chatRef = firestore.collection('chats').doc(userInfo.email + ':' + service.provider_email);\n    const totalPrice = plus.total_price ? plus.total_price : price.price;\n    const plusMinute = plus.plus_time ? plus.plus_time : '';\n    let userPurchase = {\n      providerImg: service.providerImg,\n      service_id: service_id,\n      service_title: service.service_title,\n      // category: service.category,\n      price: totalPrice,\n      plusMinute,\n      runningTime: price.runningTime,\n      additionalCost: price.additional_price,\n      working: price.working,\n      review: null,\n      purchasedAt: new Date(),\n      imgURL: service.images.thumbnail,\n      provider_id: service.provider_id,\n      provider_nickName: service.provider_nickName,\n      provider_email: service.provider_email,\n      buyer_id: userInfo.uid,\n      buyer_nickName: userProfile.initials,\n      options: price.chips,\n      type: price.type,\n      isPaid: false\n    };\n    listRef.set(_objectSpread({}, userPurchase)) // firestore.runTransaction(transaction => {\n    //   return transaction.get(userRef).then(doc => {\n    //     if(!doc.data().purchaseHistory) {\n    //       transaction.set(userRef, {\n    //         purchaseHistory: [userPurchase],\n    //       }, {merge: true})\n    //     } else {\n    //       const purchaseHistory = doc.data().purchaseHistory;\n    //       purchaseHistory.push(userPurchase);\n    //       transaction.update(userRef, { purchaseHistory: purchaseHistory })\n    //     }\n    //   })\n    // })\n    // .then(() => {\n    //   firestore.runTransaction(transaction => {\n    //     return transaction.get(providerRef).then(doc => {\n    //       if(!doc.data().workingList) {\n    //         transaction.set(providerRef, {\n    //           workingList: [userPurchase],\n    //         }, {merge: true})\n    //       } else {\n    //         const workingList = doc.data().workingList;\n    //         workingList.push(userPurchase);\n    //         transaction.update(providerRef, { workingList: workingList })\n    //       }\n    //     })\n    //   })\n    // })\n    .then(() => {\n      chatRef.get().then(doc => {\n        if (doc.exists) {\n          chatRef.update({\n            deal: true,\n            messages: firebase.firestore.FieldValue.arrayUnion({\n              message: '구매해주셔서 감사합니다, 추가 문의사항은 언제든지 남겨주시기 바랍니다.',\n              sender: service.provider_nickName,\n              sendAt: new Date()\n            })\n          });\n        } else {\n          chatRef.set({\n            updatedAt: new Date(),\n            deal: true,\n            users_email: [userInfo.email, service.provider_email],\n            users_nickName: [userProfile.initials, service.provider_nickName],\n            messages: [{\n              message: '구매해주셔서 감사합니다, 추가 문의사항은 언제든지 남겨주시기 바랍니다.',\n              sender: service.provider_nickName,\n              sendAt: new Date()\n            }]\n          });\n        }\n      });\n    }).then(() => {\n      dispatch({\n        type: 'BUY_SERVICE_SUCCESS'\n      });\n      const totalPrice = plus.total_price ? plus.total_price : price.price;\n      history.push('/purchasedone/' + listRef.id + '&pricetag=' + totalPrice);\n    }).catch(err => {\n      dispatch({\n        type: 'BUY_SERVICE_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const _proceed_order = purchaseList_id => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const listRef = firestore.collection('purchaseList').doc(purchaseList_id);\n    listRef.update({\n      proceed: true,\n      review: false,\n      request: false\n    }).then(() => {\n      dispatch({\n        type: 'PROCEED_ORDER_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'PROCEED_ORDER_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const _complete_order = purchaseList_id => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const listRef = firestore.collection('purchaseList').doc(purchaseList_id);\n    listRef.update({\n      proceed: false\n    }).then(() => {\n      dispatch({\n        type: 'COMPLETE_ORDER_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'COMPLETE_ORDER_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const _cancel_order = purchaseList_id => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const listRef = firestore.collection('purchaseList').doc(purchaseList_id);\n    listRef.update({\n      cancel: true,\n      request: false,\n      proceed: null,\n      review: null\n    }).then(() => {\n      dispatch({\n        type: 'CANCEL_ORDER_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'CANCEL_ORDER_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const _confirm_order = purchaseList_id => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const listRef = firestore.collection('purchaseList').doc(purchaseList_id);\n    listRef.update({\n      review: true\n    }).then(() => {\n      dispatch({\n        type: 'CONFIRM_ORDER_SUCCESS'\n      });\n    }).catch(err => {\n      dispatch({\n        type: 'CONFIRM_ORDER_ERROR',\n        err\n      });\n    });\n  };\n};\nexport const chatCreate = (userProfileImg, userEmail, userNickName, history) => {\n  return (dispatch, getState, {\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const userInfo = getState().firebase.auth;\n    const userProfile = getState().firebase.profile;\n    const docRef = firestore.collection('chats').doc(userInfo.email + ':' + userEmail);\n    docRef.get().then(doc => {\n      if (doc.exists) {\n        return;\n      } else if (userProfile.email === userEmail) {\n        history.push('/chattingBoard');\n        return;\n      } else {\n        docRef.set({\n          updatedAt: new Date(),\n          deal: false,\n          users_email: [userInfo.email, // buyer\n          userEmail // provider\n          ],\n          users_nickName: [userProfile.initials, userNickName],\n          messages: [{\n            message: '반갑습니다, 자유롭게 문의주시기바랍니다.',\n            sender: userNickName,\n            sendAt: new Date()\n          }]\n        });\n      }\n    }).then(() => {\n      dispatch({\n        type: 'CHAT_CREATE_SUCCESS'\n      });\n      history.push('/chattingBoard');\n    }).catch(err => {\n      dispatch({\n        type: 'CHAT_CREATE_ERROR',\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/JeHongHwang/Desktop/leekang/src/store/actions/serviceAction.js"],"names":["firebase","_buy_service","service_id","service","price","plus","history","dispatch","getState","getFirestore","firestore","userInfo","auth","userProfile","profile","listRef","collection","doc","chatRef","email","provider_email","totalPrice","total_price","plusMinute","plus_time","userPurchase","providerImg","service_title","runningTime","additionalCost","additional_price","working","review","purchasedAt","Date","imgURL","images","thumbnail","provider_id","provider_nickName","buyer_id","uid","buyer_nickName","initials","options","chips","type","isPaid","set","then","get","exists","update","deal","messages","FieldValue","arrayUnion","message","sender","sendAt","updatedAt","users_email","users_nickName","push","id","catch","err","_proceed_order","purchaseList_id","proceed","request","_complete_order","_cancel_order","cancel","_confirm_order","chatCreate","userProfileImg","userEmail","userNickName","docRef"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\n\nexport const _buy_service = (service_id, service, price, plus, history) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userInfo = getState().firebase.auth;\n    const userProfile = getState().firebase.profile;\n    // const userRef = firestore.collection('users').doc(userInfo.uid);\n    // const providerRef = firestore.collection('users').doc(service.serviceProvider);\n    const listRef = firestore.collection('purchaseList').doc();\n    const chatRef = firestore.collection('chats').doc(userInfo.email+':'+ service.provider_email);\n    const totalPrice = plus.total_price ? plus.total_price : price.price;\n    const plusMinute = plus.plus_time ? plus.plus_time : '';\n\n    let userPurchase = {\n      providerImg: service.providerImg,\n      service_id: service_id,\n      service_title: service.service_title,\n      // category: service.category,\n      price: totalPrice,\n      plusMinute,\n      runningTime: price.runningTime,\n      additionalCost: price.additional_price,\n      working: price.working,\n      review: null,\n      purchasedAt: new Date(),\n      imgURL: service.images.thumbnail,\n      provider_id: service.provider_id,\n      provider_nickName: service.provider_nickName,\n      provider_email: service.provider_email,\n      buyer_id: userInfo.uid,\n      buyer_nickName: userProfile.initials,\n      options: price.chips,\n      type: price.type,\n      isPaid: false,\n    }\n    \n    listRef.set({\n      ...userPurchase,\n    })\n    // firestore.runTransaction(transaction => {\n    //   return transaction.get(userRef).then(doc => {\n    //     if(!doc.data().purchaseHistory) {\n    //       transaction.set(userRef, {\n    //         purchaseHistory: [userPurchase],\n    //       }, {merge: true})\n    //     } else {\n    //       const purchaseHistory = doc.data().purchaseHistory;\n    //       purchaseHistory.push(userPurchase);\n    //       transaction.update(userRef, { purchaseHistory: purchaseHistory })\n    //     }\n    //   })\n    // })\n    // .then(() => {\n    //   firestore.runTransaction(transaction => {\n    //     return transaction.get(providerRef).then(doc => {\n    //       if(!doc.data().workingList) {\n    //         transaction.set(providerRef, {\n    //           workingList: [userPurchase],\n    //         }, {merge: true})\n    //       } else {\n    //         const workingList = doc.data().workingList;\n    //         workingList.push(userPurchase);\n    //         transaction.update(providerRef, { workingList: workingList })\n    //       }\n    //     })\n    //   })\n    // })\n    .then(() => {\n     chatRef.get().then(doc => {\n       if(doc.exists){\n         chatRef.update({\n           deal: true,\n           messages: firebase.firestore.FieldValue.arrayUnion(\n             {\n              message: '구매해주셔서 감사합니다, 추가 문의사항은 언제든지 남겨주시기 바랍니다.',\n              sender: service.provider_nickName,\n              sendAt: new Date(),\n             }\n           )\n         })\n       }else{\n         chatRef.set({\n           updatedAt: new Date(), \n           deal: true,\n           users_email: [\n             userInfo.email,\n             service.provider_email,\n           ],\n           users_nickName : [\n             userProfile.initials,\n             service.provider_nickName,\n           ],\n           messages: [\n             {\n               message: '구매해주셔서 감사합니다, 추가 문의사항은 언제든지 남겨주시기 바랍니다.',\n               sender: service.provider_nickName,\n               sendAt: new Date(),\n             }\n           ]\n         })\n       }\n     })\n    })\n    .then(() => {\n      dispatch({ type: 'BUY_SERVICE_SUCCESS'});\n      const totalPrice = plus.total_price ? plus.total_price : price.price;\n      history.push('/purchasedone/' + listRef.id + '&pricetag=' + totalPrice);\n    }).catch((err) => {\n      dispatch({ type: 'BUY_SERVICE_ERROR', err })\n    })\n  }\n}\n\nexport const _proceed_order = (purchaseList_id) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const listRef = firestore.collection('purchaseList').doc(purchaseList_id);\n\n    listRef.update({\n      proceed: true,\n      review: false,\n      request: false,\n    })\n    .then(() => {\n      dispatch({ type: 'PROCEED_ORDER_SUCCESS' })\n    })\n    .catch((err) => {\n      dispatch({ type: 'PROCEED_ORDER_ERROR', err })\n    })  \n  }\n}\n\nexport const _complete_order = (purchaseList_id) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const listRef = firestore.collection('purchaseList').doc(purchaseList_id);\n\n    listRef.update({\n      proceed: false,\n    })\n    .then(() => {\n      dispatch({ type : 'COMPLETE_ORDER_SUCCESS' })\n    })\n    .catch((err) => {\n      dispatch({ type : 'COMPLETE_ORDER_ERROR', err })\n    })\n  }\n}\n\nexport const _cancel_order = (purchaseList_id) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const listRef = firestore.collection('purchaseList').doc(purchaseList_id);\n\n    listRef.update({\n      cancel: true,\n      request: false,\n      proceed: null,\n      review: null,\n    })\n    .then(() => {\n      dispatch({ type : 'CANCEL_ORDER_SUCCESS' })\n    })\n    .catch((err) => {\n      dispatch({ type : 'CANCEL_ORDER_ERROR', err })\n    })\n  }\n}\n\nexport const _confirm_order = (purchaseList_id) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const listRef = firestore.collection('purchaseList').doc(purchaseList_id);\n\n    listRef.update({\n      review: true,\n    })\n    .then(() => {\n      dispatch({ type : 'CONFIRM_ORDER_SUCCESS' })\n    })\n    .catch((err) => {\n      dispatch({ type : 'CONFIRM_ORDER_ERROR', err })\n    })\n  }\n}\n\nexport const chatCreate = (userProfileImg, userEmail, userNickName, history) => {\n  return (dispatch, getState, { getFirestore }) => {\n    const firestore = getFirestore();\n    const userInfo = getState().firebase.auth;\n    const userProfile = getState().firebase.profile;\n    const docRef = firestore.collection('chats').doc(userInfo.email+':'+ userEmail);\n    \n    docRef.get().then(doc=> {\n      if(doc.exists){\n        return ;\n      } else if(userProfile.email === userEmail) {\n        history.push('/chattingBoard');\n        return;\n      } else{\n        docRef.set({ \n          updatedAt: new Date(), \n          deal: false, \n          users_email: [\n            userInfo.email, // buyer\n            userEmail,      // provider\n          ],\n          users_nickName : [\n            userProfile.initials,\n            userNickName,\n          ],\n          messages: [\n            {\n              message: '반갑습니다, 자유롭게 문의주시기바랍니다.',\n              sender: userNickName,\n              sendAt: new Date(),\n            }\n          ]\n        })\n      }\n    })\n    .then(() => {\n      dispatch({type: 'CHAT_CREATE_SUCCESS'});\n      history.push('/chattingBoard');\n    })\n    .catch((err) => {\n      dispatch({type:'CHAT_CREATE_ERROR', err});\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}